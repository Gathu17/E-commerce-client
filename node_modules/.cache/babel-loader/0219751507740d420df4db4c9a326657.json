{"ast":null,"code":"import _slicedToArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport function promiseForObject(object) {\n  return Promise.all(Object.values(object)).then(function (resolvedValues) {\n    var resolvedObject = Object.create(null);\n\n    var _iterator = _createForOfIteratorHelper(Object.keys(object).entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            i = _step$value[0],\n            key = _step$value[1];\n\n        resolvedObject[key] = resolvedValues[i];\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return resolvedObject;\n  });\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/jsutils/promiseForObject.mjs"],"names":["promiseForObject","object","Promise","all","Object","values","then","resolvedValues","resolvedObject","create","keys","entries","i","key"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AACvC,SAAOC,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,MAAP,CAAcJ,MAAd,CAAZ,EAAmCK,IAAnC,CAAwC,UAACC,cAAD,EAAoB;AACjE,QAAMC,cAAc,GAAGJ,MAAM,CAACK,MAAP,CAAc,IAAd,CAAvB;;AADiE,+CAG1CL,MAAM,CAACM,IAAP,CAAYT,MAAZ,EAAoBU,OAApB,EAH0C;AAAA;;AAAA;AAGjE,0DAAsD;AAAA;AAAA,YAA1CC,CAA0C;AAAA,YAAvCC,GAAuC;;AACpDL,QAAAA,cAAc,CAACK,GAAD,CAAd,GAAsBN,cAAc,CAACK,CAAD,CAApC;AACD;AALgE;AAAA;AAAA;AAAA;AAAA;;AAOjE,WAAOJ,cAAP;AACD,GARM,CAAP;AASD","sourcesContent":["/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport function promiseForObject(object) {\n  return Promise.all(Object.values(object)).then((resolvedValues) => {\n    const resolvedObject = Object.create(null);\n\n    for (const [i, key] of Object.keys(object).entries()) {\n      resolvedObject[key] = resolvedValues[i];\n    }\n\n    return resolvedObject;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}