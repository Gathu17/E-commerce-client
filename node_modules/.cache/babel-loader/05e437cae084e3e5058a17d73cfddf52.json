{"ast":null,"code":"import _slicedToArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\n\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition: function DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n\n      var argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n      return checkArgUniqueness(\"@\".concat(directiveNode.name.value), argumentNodes);\n    },\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    var typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    var fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];\n\n    var _iterator = _createForOfIteratorHelper(fieldNodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fieldDef = _step.value;\n\n        var _fieldDef$arguments;\n\n        var fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n        /* c8 ignore next */\n\n        var argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];\n        checkArgUniqueness(\"\".concat(typeName, \".\").concat(fieldName), argumentNodes);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    var seenArgs = groupBy(argumentNodes, function (arg) {\n      return arg.name.value;\n    });\n\n    var _iterator2 = _createForOfIteratorHelper(seenArgs),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            argName = _step2$value[0],\n            argNodes = _step2$value[1];\n\n        if (argNodes.length > 1) {\n          context.reportError(new GraphQLError(\"Argument \\\"\".concat(parentName, \"(\").concat(argName, \":)\\\" can only be defined once.\"), argNodes.map(function (node) {\n            return node.name;\n          })));\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs"],"names":["groupBy","GraphQLError","UniqueArgumentDefinitionNamesRule","context","DirectiveDefinition","directiveNode","_directiveNode$argume","argumentNodes","arguments","checkArgUniqueness","name","value","InterfaceTypeDefinition","checkArgUniquenessPerField","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","typeNode","_typeNode$fields","typeName","fieldNodes","fields","fieldDef","_fieldDef$arguments","fieldName","parentName","seenArgs","arg","argName","argNodes","length","reportError","map","node"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iCAAT,CAA2CC,OAA3C,EAAoD;AACzD,SAAO;AACLC,IAAAA,mBADK,+BACeC,aADf,EAC8B;AACjC,UAAIC,qBAAJ,CADiC,CAGjC;;AAEA;;;AACA,UAAMC,aAAa,GACjB,CAACD,qBAAqB,GAAGD,aAAa,CAACG,SAAvC,MAAsD,IAAtD,IACAF,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;AAKA,aAAOG,kBAAkB,YAAKJ,aAAa,CAACK,IAAd,CAAmBC,KAAxB,GAAiCJ,aAAjC,CAAzB;AACD,KAbI;AAeLK,IAAAA,uBAAuB,EAAEC,0BAfpB;AAgBLC,IAAAA,sBAAsB,EAAED,0BAhBnB;AAiBLE,IAAAA,oBAAoB,EAAEF,0BAjBjB;AAkBLG,IAAAA,mBAAmB,EAAEH;AAlBhB,GAAP;;AAqBA,WAASA,0BAAT,CAAoCI,QAApC,EAA8C;AAC5C,QAAIC,gBAAJ;;AAEA,QAAMC,QAAQ,GAAGF,QAAQ,CAACP,IAAT,CAAcC,KAA/B,CAH4C,CAGN;;AAEtC;;AAEA,QAAMS,UAAU,GACd,CAACF,gBAAgB,GAAGD,QAAQ,CAACI,MAA7B,MAAyC,IAAzC,IACAH,gBAAgB,KAAK,KAAK,CAD1B,GAEIA,gBAFJ,GAGI,EAJN;;AAP4C,+CAarBE,UAbqB;AAAA;;AAAA;AAa5C,0DAAmC;AAAA,YAAxBE,QAAwB;;AACjC,YAAIC,mBAAJ;;AAEA,YAAMC,SAAS,GAAGF,QAAQ,CAACZ,IAAT,CAAcC,KAAhC,CAHiC,CAGM;;AAEvC;;AAEA,YAAMJ,aAAa,GACjB,CAACgB,mBAAmB,GAAGD,QAAQ,CAACd,SAAhC,MAA+C,IAA/C,IACAe,mBAAmB,KAAK,KAAK,CAD7B,GAEIA,mBAFJ,GAGI,EAJN;AAKAd,QAAAA,kBAAkB,WAAIU,QAAJ,cAAgBK,SAAhB,GAA6BjB,aAA7B,CAAlB;AACD;AA1B2C;AAAA;AAAA;AAAA;AAAA;;AA4B5C,WAAO,KAAP;AACD;;AAED,WAASE,kBAAT,CAA4BgB,UAA5B,EAAwClB,aAAxC,EAAuD;AACrD,QAAMmB,QAAQ,GAAG1B,OAAO,CAACO,aAAD,EAAgB,UAACoB,GAAD;AAAA,aAASA,GAAG,CAACjB,IAAJ,CAASC,KAAlB;AAAA,KAAhB,CAAxB;;AADqD,gDAGnBe,QAHmB;AAAA;;AAAA;AAGrD,6DAA4C;AAAA;AAAA,YAAhCE,OAAgC;AAAA,YAAvBC,QAAuB;;AAC1C,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvB3B,UAAAA,OAAO,CAAC4B,WAAR,CACE,IAAI9B,YAAJ,sBACewB,UADf,cAC6BG,OAD7B,qCAEEC,QAAQ,CAACG,GAAT,CAAa,UAACC,IAAD;AAAA,mBAAUA,IAAI,CAACvB,IAAf;AAAA,WAAb,CAFF,CADF;AAMD;AACF;AAZoD;AAAA;AAAA;AAAA;AAAA;;AAcrD,WAAO,KAAP;AACD;AACF","sourcesContent":["import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            argNodes.map((node) => node.name),\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}