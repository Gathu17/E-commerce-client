{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\n\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var fragType = context.getType();\n      var parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment cannot be spread here as objects of type \\\"\".concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    },\n    FragmentSpread: function FragmentSpread(node) {\n      var fragName = node.name.value;\n      var fragType = getFragmentType(context, fragName);\n      var parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        var parentTypeStr = inspect(parentType);\n        var fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" cannot be spread here as objects of type \\\"\").concat(parentTypeStr, \"\\\" can never be of type \\\"\").concat(fragTypeStr, \"\\\".\"), node));\n      }\n    }\n  };\n}\n\nfunction getFragmentType(context, name) {\n  var frag = context.getFragment(name);\n\n  if (frag) {\n    var type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"],"names":["inspect","GraphQLError","isCompositeType","doTypesOverlap","typeFromAST","PossibleFragmentSpreadsRule","context","InlineFragment","node","fragType","getType","parentType","getParentType","getSchema","parentTypeStr","fragTypeStr","reportError","FragmentSpread","fragName","name","value","getFragmentType","frag","getFragment","type","typeCondition"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,cAAT,QAA+B,qCAA/B;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,2BAAT,CAAqCC,OAArC,EAA8C;AACnD,SAAO;AACLC,IAAAA,cADK,0BACUC,IADV,EACgB;AACnB,UAAMC,QAAQ,GAAGH,OAAO,CAACI,OAAR,EAAjB;AACA,UAAMC,UAAU,GAAGL,OAAO,CAACM,aAAR,EAAnB;;AAEA,UACEV,eAAe,CAACO,QAAD,CAAf,IACAP,eAAe,CAACS,UAAD,CADf,IAEA,CAACR,cAAc,CAACG,OAAO,CAACO,SAAR,EAAD,EAAsBJ,QAAtB,EAAgCE,UAAhC,CAHjB,EAIE;AACA,YAAMG,aAAa,GAAGd,OAAO,CAACW,UAAD,CAA7B;AACA,YAAMI,WAAW,GAAGf,OAAO,CAACS,QAAD,CAA3B;AACAH,QAAAA,OAAO,CAACU,WAAR,CACE,IAAIf,YAAJ,+DACwDa,aADxD,uCACgGC,WADhG,UAEEP,IAFF,CADF;AAMD;AACF,KAnBI;AAqBLS,IAAAA,cArBK,0BAqBUT,IArBV,EAqBgB;AACnB,UAAMU,QAAQ,GAAGV,IAAI,CAACW,IAAL,CAAUC,KAA3B;AACA,UAAMX,QAAQ,GAAGY,eAAe,CAACf,OAAD,EAAUY,QAAV,CAAhC;AACA,UAAMP,UAAU,GAAGL,OAAO,CAACM,aAAR,EAAnB;;AAEA,UACEH,QAAQ,IACRE,UADA,IAEA,CAACR,cAAc,CAACG,OAAO,CAACO,SAAR,EAAD,EAAsBJ,QAAtB,EAAgCE,UAAhC,CAHjB,EAIE;AACA,YAAMG,aAAa,GAAGd,OAAO,CAACW,UAAD,CAA7B;AACA,YAAMI,WAAW,GAAGf,OAAO,CAACS,QAAD,CAA3B;AACAH,QAAAA,OAAO,CAACU,WAAR,CACE,IAAIf,YAAJ,sBACeiB,QADf,2DACsEJ,aADtE,uCAC8GC,WAD9G,UAEEP,IAFF,CADF;AAMD;AACF;AAxCI,GAAP;AA0CD;;AAED,SAASa,eAAT,CAAyBf,OAAzB,EAAkCa,IAAlC,EAAwC;AACtC,MAAMG,IAAI,GAAGhB,OAAO,CAACiB,WAAR,CAAoBJ,IAApB,CAAb;;AAEA,MAAIG,IAAJ,EAAU;AACR,QAAME,IAAI,GAAGpB,WAAW,CAACE,OAAO,CAACO,SAAR,EAAD,EAAsBS,IAAI,CAACG,aAA3B,CAAxB;;AAEA,QAAIvB,eAAe,CAACsB,IAAD,CAAnB,EAA2B;AACzB,aAAOA,IAAP;AACD;AACF;AACF","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            node,\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}