{"ast":null,"code":"import _toConsumableArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { isTypeDefinitionNode, isTypeExtensionNode } from '../language/predicates.mjs';\nimport { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isListType, isNonNullType, isObjectType, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { GraphQLDeprecatedDirective, GraphQLDirective, GraphQLSpecifiedByDirective } from '../type/directives.mjs';\nimport { introspectionTypes, isIntrospectionType } from '../type/introspection.mjs';\nimport { isSpecifiedScalarType, specifiedScalarTypes } from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\n\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(false, 'Must provide valid Document AST.');\n\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  var schemaConfig = schema.toConfig();\n  var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig ? schema : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid; // Collect the type definitions and extensions found in the document.\n\n\n  var typeDefs = [];\n  var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  var directiveDefs = [];\n  var schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  var schemaExtensions = [];\n\n  var _iterator = _createForOfIteratorHelper(documentAST.definitions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var def = _step.value;\n\n      if (def.kind === Kind.SCHEMA_DEFINITION) {\n        schemaDef = def;\n      } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n        schemaExtensions.push(def);\n      } else if (isTypeDefinitionNode(def)) {\n        typeDefs.push(def);\n      } else if (isTypeExtensionNode(def)) {\n        var extendedTypeName = def.name.value;\n        var existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n        typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n      } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        directiveDefs.push(def);\n      }\n    } // If this document contains no new types, extensions, or directives then\n    // return the same unmodified GraphQLSchema instance.\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {\n    return schemaConfig;\n  }\n\n  var typeMap = Object.create(null);\n\n  var _iterator2 = _createForOfIteratorHelper(schemaConfig.types),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var existingType = _step2.value;\n      typeMap[existingType.name] = extendNamedType(existingType);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  for (var _i = 0, _typeDefs = typeDefs; _i < _typeDefs.length; _i++) {\n    var typeNode = _typeDefs[_i];\n\n    var _stdTypeMap$name;\n\n    var name = typeNode.name.value;\n    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);\n  }\n\n  var operationTypes = _objectSpread(_objectSpread({\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)\n  }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.\n\n\n  return _objectSpread(_objectSpread({\n    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value\n  }, operationTypes), {}, {\n    types: Object.values(typeMap),\n    directives: [].concat(_toConsumableArray(schemaConfig.directives.map(replaceDirective)), _toConsumableArray(directiveDefs.map(buildDirective))),\n    extensions: Object.create(null),\n    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false\n  }); // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      args: mapValue(config.args, extendArg)\n    }));\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];\n    return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, function (field) {\n          return _objectSpread(_objectSpread({}, field), {}, {\n            type: replaceType(field.type)\n          });\n        })), buildInputFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];\n    return new GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {\n      values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];\n    var specifiedByURL = config.specifiedByURL;\n\n    var _iterator3 = _createForOfIteratorHelper(extensions),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var extensionNode = _step3.value;\n\n        var _getSpecifiedByURL;\n\n        specifiedByURL = (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null && _getSpecifiedByURL !== void 0 ? _getSpecifiedByURL : specifiedByURL;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    return new GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {\n      specifiedByURL: specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];\n    return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(_toConsumableArray(type.getInterfaces().map(replaceNamedType)), _toConsumableArray(buildInterfaces(extensions)));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];\n    return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(_toConsumableArray(type.getInterfaces().map(replaceNamedType)), _toConsumableArray(buildInterfaces(extensions)));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];\n    return new GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {\n      types: function types() {\n        return [].concat(_toConsumableArray(type.getTypes().map(replaceNamedType)), _toConsumableArray(buildUnionTypes(extensions)));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendField(field) {\n    return _objectSpread(_objectSpread({}, field), {}, {\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg)\n    });\n  }\n\n  function extendArg(arg) {\n    return _objectSpread(_objectSpread({}, arg), {}, {\n      type: replaceType(arg.type)\n    });\n  }\n\n  function getOperationTypes(nodes) {\n    var opTypes = {};\n\n    var _iterator4 = _createForOfIteratorHelper(nodes),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var node = _step4.value;\n\n        var _node$operationTypes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n\n        var operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n\n        var _iterator5 = _createForOfIteratorHelper(operationTypesNodes),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var operationType = _step5.value;\n            // Note: While this could make early assertions to get the correctly\n            // typed values below, that would throw immediately while type system\n            // validation with validateSchema() will produce more actionable results.\n            // @ts-expect-error\n            opTypes[operationType.operation] = getNamedType(operationType.type);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    var name = node.name.value;\n    var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(\"Unknown type: \\\"\".concat(name, \"\\\".\"));\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description: (_node$description = node.description) === null || _node$description === void 0 ? void 0 : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(function (_ref) {\n        var value = _ref.value;\n        return value;\n      }),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    var fieldConfigMap = Object.create(null);\n\n    var _iterator6 = _createForOfIteratorHelper(nodes),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var node = _step6.value;\n\n        var _node$fields; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n\n        var nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n\n        var _iterator7 = _createForOfIteratorHelper(nodeFields),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var field = _step7.value;\n\n            var _field$description;\n\n            fieldConfigMap[field.name.value] = {\n              // Note: While this could make assertions to get the correctly typed\n              // value, that would throw immediately while type system validation\n              // with validateSchema() will produce more actionable results.\n              type: getWrappedType(field.type),\n              description: (_field$description = field.description) === null || _field$description === void 0 ? void 0 : _field$description.value,\n              args: buildArgumentMap(field.arguments),\n              deprecationReason: getDeprecationReason(field),\n              astNode: field\n            };\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    var argsNodes =\n    /* c8 ignore next */\n    args !== null && args !== void 0 ? args : [];\n    var argConfigMap = Object.create(null);\n\n    var _iterator8 = _createForOfIteratorHelper(argsNodes),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var arg = _step8.value;\n\n        var _arg$description; // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n\n\n        var type = getWrappedType(arg.type);\n        argConfigMap[arg.name.value] = {\n          type: type,\n          description: (_arg$description = arg.description) === null || _arg$description === void 0 ? void 0 : _arg$description.value,\n          defaultValue: valueFromAST(arg.defaultValue, type),\n          deprecationReason: getDeprecationReason(arg),\n          astNode: arg\n        };\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    var inputFieldMap = Object.create(null);\n\n    var _iterator9 = _createForOfIteratorHelper(nodes),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var node = _step9.value;\n\n        var _node$fields2; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n\n        var fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];\n\n        var _iterator10 = _createForOfIteratorHelper(fieldsNodes),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var field = _step10.value;\n\n            var _field$description2; // Note: While this could make assertions to get the correctly typed\n            // value, that would throw immediately while type system validation\n            // with validateSchema() will produce more actionable results.\n\n\n            var type = getWrappedType(field.type);\n            inputFieldMap[field.name.value] = {\n              type: type,\n              description: (_field$description2 = field.description) === null || _field$description2 === void 0 ? void 0 : _field$description2.value,\n              defaultValue: valueFromAST(field.defaultValue, type),\n              deprecationReason: getDeprecationReason(field),\n              astNode: field\n            };\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    var enumValueMap = Object.create(null);\n\n    var _iterator11 = _createForOfIteratorHelper(nodes),\n        _step11;\n\n    try {\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        var node = _step11.value;\n\n        var _node$values; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n\n        var valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n\n        var _iterator12 = _createForOfIteratorHelper(valuesNodes),\n            _step12;\n\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var value = _step12.value;\n\n            var _value$description;\n\n            enumValueMap[value.name.value] = {\n              description: (_value$description = value.description) === null || _value$description === void 0 ? void 0 : _value$description.value,\n              deprecationReason: getDeprecationReason(value),\n              astNode: value\n            };\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    function (node) {\n      var _node$interfaces$map, _node$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_node$interfaces$map = (_node$interfaces = node.interfaces) === null || _node$interfaces === void 0 ? void 0 : _node$interfaces.map(getNamedType)) !== null && _node$interfaces$map !== void 0 ? _node$interfaces$map : []\n      );\n    });\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    function (node) {\n      var _node$types$map, _node$types;\n\n      return (\n        /* c8 ignore next */\n        (_node$types$map = (_node$types = node.types) === null || _node$types === void 0 ? void 0 : _node$types.map(getNamedType)) !== null && _node$types$map !== void 0 ? _node$types$map : []\n      );\n    });\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    var name = astNode.name.value;\n    var extensionASTNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        {\n          var _astNode$description;\n\n          var allNodes = [astNode].concat(_toConsumableArray(extensionASTNodes));\n          return new GraphQLObjectType({\n            name: name,\n            description: (_astNode$description = astNode.description) === null || _astNode$description === void 0 ? void 0 : _astNode$description.value,\n            interfaces: function interfaces() {\n              return buildInterfaces(allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        {\n          var _astNode$description2;\n\n          var _allNodes = [astNode].concat(_toConsumableArray(extensionASTNodes));\n\n          return new GraphQLInterfaceType({\n            name: name,\n            description: (_astNode$description2 = astNode.description) === null || _astNode$description2 === void 0 ? void 0 : _astNode$description2.value,\n            interfaces: function interfaces() {\n              return buildInterfaces(_allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(_allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        {\n          var _astNode$description3;\n\n          var _allNodes2 = [astNode].concat(_toConsumableArray(extensionASTNodes));\n\n          return new GraphQLEnumType({\n            name: name,\n            description: (_astNode$description3 = astNode.description) === null || _astNode$description3 === void 0 ? void 0 : _astNode$description3.value,\n            values: buildEnumValueMap(_allNodes2),\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n\n      case Kind.UNION_TYPE_DEFINITION:\n        {\n          var _astNode$description4;\n\n          var _allNodes3 = [astNode].concat(_toConsumableArray(extensionASTNodes));\n\n          return new GraphQLUnionType({\n            name: name,\n            description: (_astNode$description4 = astNode.description) === null || _astNode$description4 === void 0 ? void 0 : _astNode$description4.value,\n            types: function types() {\n              return buildUnionTypes(_allNodes3);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        {\n          var _astNode$description5;\n\n          return new GraphQLScalarType({\n            name: name,\n            description: (_astNode$description5 = astNode.description) === null || _astNode$description5 === void 0 ? void 0 : _astNode$description5.value,\n            specifiedByURL: getSpecifiedByURL(astNode),\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        {\n          var _astNode$description6;\n\n          var _allNodes4 = [astNode].concat(_toConsumableArray(extensionASTNodes));\n\n          return new GraphQLInputObjectType({\n            name: name,\n            description: (_astNode$description6 = astNode.description) === null || _astNode$description6 === void 0 ? void 0 : _astNode$description6.value,\n            fields: function fields() {\n              return buildInputFieldMap(_allNodes4);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n    }\n  }\n}\nvar stdTypeMap = keyMap([].concat(_toConsumableArray(specifiedScalarTypes), _toConsumableArray(introspectionTypes)), function (type) {\n  return type.name;\n});\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\n\nfunction getSpecifiedByURL(node) {\n  var specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/utilities/extendSchema.mjs"],"names":["devAssert","inspect","invariant","keyMap","mapValue","Kind","isTypeDefinitionNode","isTypeExtensionNode","GraphQLEnumType","GraphQLInputObjectType","GraphQLInterfaceType","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLScalarType","GraphQLUnionType","isEnumType","isInputObjectType","isInterfaceType","isListType","isNonNullType","isObjectType","isScalarType","isUnionType","GraphQLDeprecatedDirective","GraphQLDirective","GraphQLSpecifiedByDirective","introspectionTypes","isIntrospectionType","isSpecifiedScalarType","specifiedScalarTypes","assertSchema","GraphQLSchema","assertValidSDLExtension","getDirectiveValues","valueFromAST","extendSchema","schema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","schemaConfig","toConfig","extendedConfig","extendSchemaImpl","_schemaDef","_schemaDef$descriptio","_schemaDef2","_options$assumeValid","typeDefs","typeExtensionsMap","Object","create","directiveDefs","schemaDef","schemaExtensions","definitions","def","SCHEMA_DEFINITION","SCHEMA_EXTENSION","push","extendedTypeName","name","value","existingTypeExtensions","concat","DIRECTIVE_DEFINITION","keys","length","typeMap","types","existingType","extendNamedType","typeNode","_stdTypeMap$name","stdTypeMap","buildType","operationTypes","query","replaceNamedType","mutation","subscription","getOperationTypes","description","values","directives","map","replaceDirective","buildDirective","extensions","astNode","extensionASTNodes","replaceType","type","ofType","directive","config","args","extendArg","extendScalarType","extendObjectType","extendInterfaceType","extendUnionType","extendEnumType","extendInputObjectType","_typeExtensionsMap$co","fields","field","buildInputFieldMap","_typeExtensionsMap$ty","buildEnumValueMap","_typeExtensionsMap$co2","specifiedByURL","extensionNode","_getSpecifiedByURL","getSpecifiedByURL","_typeExtensionsMap$co3","interfaces","getInterfaces","buildInterfaces","extendField","buildFieldMap","_typeExtensionsMap$co4","_typeExtensionsMap$co5","getTypes","buildUnionTypes","arg","nodes","opTypes","node","_node$operationTypes","operationTypesNodes","operationType","operation","getNamedType","_stdTypeMap$name2","undefined","Error","getWrappedType","LIST_TYPE","NON_NULL_TYPE","_node$description","locations","isRepeatable","repeatable","buildArgumentMap","arguments","fieldConfigMap","_node$fields","nodeFields","_field$description","deprecationReason","getDeprecationReason","argsNodes","argConfigMap","_arg$description","defaultValue","inputFieldMap","_node$fields2","fieldsNodes","_field$description2","enumValueMap","_node$values","valuesNodes","_value$description","flatMap","_node$interfaces$map","_node$interfaces","_node$types$map","_node$types","_typeExtensionsMap$na","OBJECT_TYPE_DEFINITION","_astNode$description","allNodes","INTERFACE_TYPE_DEFINITION","_astNode$description2","ENUM_TYPE_DEFINITION","_astNode$description3","UNION_TYPE_DEFINITION","_astNode$description4","SCALAR_TYPE_DEFINITION","_astNode$description5","INPUT_OBJECT_TYPE_DEFINITION","_astNode$description6","deprecated","reason","specifiedBy","url"],"mappings":"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","sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../language/predicates.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  GraphQLDeprecatedDirective,\n  GraphQLDirective,\n  GraphQLSpecifiedByDirective,\n} from '../type/directives.mjs';\nimport {\n  introspectionTypes,\n  isIntrospectionType,\n} from '../type/introspection.mjs';\nimport {\n  isSpecifiedScalarType,\n  specifiedScalarTypes,\n} from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      args: mapValue(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...mapValue(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n    }\n  }\n}\nconst stdTypeMap = keyMap(\n  [...specifiedScalarTypes, ...introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n"]},"metadata":{},"sourceType":"module"}