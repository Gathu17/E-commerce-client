{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { invariant } from '../jsutils/invariant.mjs';\nvar LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\n\nexport function getLocation(source, position) {\n  var lastLineStart = 0;\n  var line = 1;\n\n  var _iterator = _createForOfIteratorHelper(source.body.matchAll(LineRegExp)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var match = _step.value;\n      typeof match.index === 'number' || invariant(false);\n\n      if (match.index >= position) {\n        break;\n      }\n\n      lastLineStart = match.index + match[0].length;\n      line += 1;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    line: line,\n    column: position + 1 - lastLineStart\n  };\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/language/location.mjs"],"names":["invariant","LineRegExp","getLocation","source","position","lastLineStart","line","body","matchAll","match","index","length","column"],"mappings":";AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,IAAMC,UAAU,GAAG,cAAnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAC5C,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,IAAI,GAAG,CAAX;;AAF4C,6CAIxBH,MAAM,CAACI,IAAP,CAAYC,QAAZ,CAAqBP,UAArB,CAJwB;AAAA;;AAAA;AAI5C,wDAAsD;AAAA,UAA3CQ,KAA2C;AACpD,aAAOA,KAAK,CAACC,KAAb,KAAuB,QAAvB,IAAmCV,SAAS,CAAC,KAAD,CAA5C;;AAEA,UAAIS,KAAK,CAACC,KAAN,IAAeN,QAAnB,EAA6B;AAC3B;AACD;;AAEDC,MAAAA,aAAa,GAAGI,KAAK,CAACC,KAAN,GAAcD,KAAK,CAAC,CAAD,CAAL,CAASE,MAAvC;AACAL,MAAAA,IAAI,IAAI,CAAR;AACD;AAb2C;AAAA;AAAA;AAAA;AAAA;;AAe5C,SAAO;AACLA,IAAAA,IAAI,EAAJA,IADK;AAELM,IAAAA,MAAM,EAAER,QAAQ,GAAG,CAAX,GAAeC;AAFlB,GAAP;AAID","sourcesContent":["import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}