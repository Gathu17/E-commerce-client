{"ast":null,"code":"import { invariant } from '../../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\n\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field: function Field(node) {\n      var fieldDef = context.getFieldDef();\n      var deprecationReason = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        var parentType = context.getParentType();\n        parentType != null || invariant(false);\n        context.reportError(new GraphQLError(\"The field \".concat(parentType.name, \".\").concat(fieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n      }\n    },\n    Argument: function Argument(node) {\n      var argDef = context.getArgument();\n      var deprecationReason = argDef === null || argDef === void 0 ? void 0 : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        var directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        } else {\n          var parentType = context.getParentType();\n          var fieldDef = context.getFieldDef();\n          parentType != null && fieldDef != null || invariant(false);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(parentType.name, \".\").concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        var inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        var deprecationReason = inputFieldDef === null || inputFieldDef === void 0 ? void 0 : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(new GraphQLError(\"The input field \".concat(inputObjectDef.name, \".\").concat(inputFieldDef.name, \" is deprecated. \").concat(deprecationReason), node));\n        }\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var enumValueDef = context.getEnumValue();\n      var deprecationReason = enumValueDef === null || enumValueDef === void 0 ? void 0 : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        var enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(false);\n        context.reportError(new GraphQLError(\"The enum value \\\"\".concat(enumTypeDef.name, \".\").concat(enumValueDef.name, \"\\\" is deprecated. \").concat(deprecationReason), node));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs"],"names":["invariant","GraphQLError","getNamedType","isInputObjectType","NoDeprecatedCustomRule","context","Field","node","fieldDef","getFieldDef","deprecationReason","parentType","getParentType","reportError","name","Argument","argDef","getArgument","directiveDef","getDirective","ObjectField","inputObjectDef","getParentInputType","inputFieldDef","getFields","value","EnumValue","enumValueDef","getEnumValue","enumTypeDef","getInputType"],"mappings":"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","sourcesContent":["import { invariant } from '../../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason =\n        fieldDef === null || fieldDef === void 0\n          ? void 0\n          : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,\n            node,\n          ),\n        );\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason =\n        argDef === null || argDef === void 0\n          ? void 0\n          : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(\n            new GraphQLError(\n              `Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              node,\n            ),\n          );\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          (parentType != null && fieldDef != null) || invariant(false);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              node,\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason =\n          inputFieldDef === null || inputFieldDef === void 0\n            ? void 0\n            : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(\n            new GraphQLError(\n              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,\n              node,\n            ),\n          );\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason =\n        enumValueDef === null || enumValueDef === void 0\n          ? void 0\n          : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`,\n            node,\n          ),\n        );\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}