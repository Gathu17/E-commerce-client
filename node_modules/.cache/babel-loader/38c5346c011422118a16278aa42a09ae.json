{"ast":null,"code":"import _classCallCheck from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport { argsToArgsConfig, defineArguments, GraphQLNonNull } from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\"Expected \".concat(inspect(directive), \" to be a GraphQL directive.\"));\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nexport var GraphQLDirective = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function GraphQLDirective(config) {\n    _classCallCheck(this, GraphQLDirective);\n\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = (_config$isRepeatable = config.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) || devAssert(false, \"@\".concat(config.name, \" locations must be an Array.\"));\n    var args = (_config$args = config.args) !== null && _config$args !== void 0 ? _config$args : {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(false, \"@\".concat(config.name, \" args must be an object with argument names as keys.\"));\n    this.args = defineArguments(args);\n  }\n\n  _createClass(GraphQLDirective, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'GraphQLDirective';\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      return {\n        name: this.name,\n        description: this.description,\n        locations: this.locations,\n        args: argsToArgsConfig(this.args),\n        isRepeatable: this.isRepeatable,\n        extensions: this.extensions,\n        astNode: this.astNode\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '@' + this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLDirective;\n}(Symbol.toStringTag);\n/**\n * Used to conditionally include fields or fragments.\n */\n\nexport var GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport var GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport var DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport var GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ARGUMENT_DEFINITION, DirectiveLocation.INPUT_FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport var GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.'\n    }\n  }\n});\n/**\n * The full list of specified directives.\n */\n\nexport var specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(function (_ref) {\n    var name = _ref.name;\n    return name === directive.name;\n  });\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/type/directives.mjs"],"names":["devAssert","inspect","instanceOf","isObjectLike","toObjMap","DirectiveLocation","assertName","argsToArgsConfig","defineArguments","GraphQLNonNull","GraphQLBoolean","GraphQLString","isDirective","directive","GraphQLDirective","assertDirective","Error","config","_config$isRepeatable","_config$args","name","description","locations","isRepeatable","extensions","astNode","Array","isArray","args","toString","Symbol","toStringTag","GraphQLIncludeDirective","FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","if","type","GraphQLSkipDirective","DEFAULT_DEPRECATION_REASON","GraphQLDeprecatedDirective","FIELD_DEFINITION","ARGUMENT_DEFINITION","INPUT_FIELD_DEFINITION","ENUM_VALUE","reason","defaultValue","GraphQLSpecifiedByDirective","SCALAR","url","specifiedDirectives","Object","freeze","isSpecifiedDirective","some"],"mappings":"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","sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n"]},"metadata":{},"sourceType":"module"}