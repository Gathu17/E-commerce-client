{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\n\nexport function NoUndefinedVariablesRule(context) {\n  var variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableNameDefined = Object.create(null);\n      },\n      leave: function leave(operation) {\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        var _iterator = _createForOfIteratorHelper(usages),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value.node;\n            var varName = node.name.value;\n\n            if (variableNameDefined[varName] !== true) {\n              context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(varName, \"\\\" is not defined by operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(varName, \"\\\" is not defined.\"), [node, operation]));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"],"names":["GraphQLError","NoUndefinedVariablesRule","context","variableNameDefined","Object","create","OperationDefinition","enter","leave","operation","usages","getRecursiveVariableUsages","node","varName","name","value","reportError","VariableDefinition","variable"],"mappings":";AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AAChD,MAAIC,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KADmB,mBACX;AACNJ,QAAAA,mBAAmB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAtB;AACD,OAHkB;AAKnBG,MAAAA,KALmB,iBAKbC,SALa,EAKF;AACf,YAAMC,MAAM,GAAGR,OAAO,CAACS,0BAAR,CAAmCF,SAAnC,CAAf;;AADe,mDAGQC,MAHR;AAAA;;AAAA;AAGf,8DAA+B;AAAA,gBAAlBE,IAAkB,eAAlBA,IAAkB;AAC7B,gBAAMC,OAAO,GAAGD,IAAI,CAACE,IAAL,CAAUC,KAA1B;;AAEA,gBAAIZ,mBAAmB,CAACU,OAAD,CAAnB,KAAiC,IAArC,EAA2C;AACzCX,cAAAA,OAAO,CAACc,WAAR,CACE,IAAIhB,YAAJ,CACES,SAAS,CAACK,IAAV,yBACkBD,OADlB,8CAC2DJ,SAAS,CAACK,IAAV,CAAeC,KAD1E,iCAEkBF,OAFlB,uBADF,EAIE,CAACD,IAAD,EAAOH,SAAP,CAJF,CADF;AAQD;AACF;AAhBc;AAAA;AAAA;AAAA;AAAA;AAiBhB;AAtBkB,KADhB;AA0BLQ,IAAAA,kBA1BK,8BA0BcL,IA1Bd,EA0BoB;AACvBT,MAAAA,mBAAmB,CAACS,IAAI,CAACM,QAAL,CAAcJ,IAAd,CAAmBC,KAApB,CAAnB,GAAgD,IAAhD;AACD;AA5BI,GAAP;AA8BD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                [node, operation],\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}