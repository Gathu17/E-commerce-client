{"ast":null,"code":"import _slicedToArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\n\nexport function ProvidedRequiredArgumentsRule(context) {\n  return _objectSpread(_objectSpread({}, ProvidedRequiredArgumentsOnDirectivesRule(context)), {}, {\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        var providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n        /* c8 ignore next */\n        (_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map(function (arg) {\n          return arg.name.value;\n        }));\n\n        var _iterator = _createForOfIteratorHelper(fieldDef.args),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var argDef = _step.value;\n\n            if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n              var argTypeStr = inspect(argDef.type);\n              context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldDef.name, \"\\\" argument \\\"\").concat(argDef.name, \"\\\" of type \\\"\").concat(argTypeStr, \"\\\" is required, but it was not provided.\"), fieldNode));\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  var requiredArgsMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = (_schema$getDirectives = schema === null || schema === void 0 ? void 0 : schema.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : specifiedDirectives;\n\n  var _iterator2 = _createForOfIteratorHelper(definedDirectives),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var directive = _step2.value;\n      requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), function (arg) {\n        return arg.name;\n      });\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  var _iterator3 = _createForOfIteratorHelper(astDefinitions),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var def = _step3.value;\n\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        var _def$arguments; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n        /* c8 ignore next */\n\n\n        var argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n        requiredArgsMap[def.name.value] = keyMap(argNodes.filter(isRequiredArgumentNode), function (arg) {\n          return arg.name.value;\n        });\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave: function leave(directiveNode) {\n        var directiveName = directiveNode.name.value;\n        var requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n\n\n          var argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n          var argNodeMap = new Set(argNodes.map(function (arg) {\n            return arg.name.value;\n          }));\n\n          for (var _i = 0, _Object$entries = Object.entries(requiredArgs); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                argName = _Object$entries$_i[0],\n                argDef = _Object$entries$_i[1];\n\n            if (!argNodeMap.has(argName)) {\n              var argType = isType(argDef.type) ? inspect(argDef.type) : print(argDef.type);\n              context.reportError(new GraphQLError(\"Directive \\\"@\".concat(directiveName, \"\\\" argument \\\"\").concat(argName, \"\\\" of type \\\"\").concat(argType, \"\\\" is required, but it was not provided.\"), directiveNode));\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs"],"names":["inspect","keyMap","GraphQLError","Kind","print","isRequiredArgument","isType","specifiedDirectives","ProvidedRequiredArgumentsRule","context","ProvidedRequiredArgumentsOnDirectivesRule","Field","leave","fieldNode","_fieldNode$arguments","fieldDef","getFieldDef","providedArgs","Set","arguments","map","arg","name","value","args","argDef","has","argTypeStr","type","reportError","_schema$getDirectives","requiredArgsMap","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","filter","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","_def$arguments","argNodes","isRequiredArgumentNode","Directive","directiveNode","directiveName","requiredArgs","_directiveNode$argume","argNodeMap","entries","argName","argType","NON_NULL_TYPE","defaultValue"],"mappings":"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","sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                fieldNode,\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  directiveNode,\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n"]},"metadata":{},"sourceType":"module"}