{"ast":null,"code":"import _slicedToArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition: function OperationDefinition(operationNode) {\n      var _operationNode$variab; // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n\n      var variableDefinitions = (_operationNode$variab = operationNode.variableDefinitions) !== null && _operationNode$variab !== void 0 ? _operationNode$variab : [];\n      var seenVariableDefinitions = groupBy(variableDefinitions, function (node) {\n        return node.variable.name.value;\n      });\n\n      var _iterator = _createForOfIteratorHelper(seenVariableDefinitions),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              variableName = _step$value[0],\n              variableNodes = _step$value[1];\n\n          if (variableNodes.length > 1) {\n            context.reportError(new GraphQLError(\"There can be only one variable named \\\"$\".concat(variableName, \"\\\".\"), variableNodes.map(function (node) {\n              return node.variable.name;\n            })));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs"],"names":["groupBy","GraphQLError","UniqueVariableNamesRule","context","OperationDefinition","operationNode","_operationNode$variab","variableDefinitions","seenVariableDefinitions","node","variable","name","value","variableName","variableNodes","length","reportError","map"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;AAC/C,SAAO;AACLC,IAAAA,mBADK,+BACeC,aADf,EAC8B;AACjC,UAAIC,qBAAJ,CADiC,CAGjC;;AAEA;;;AACA,UAAMC,mBAAmB,GACvB,CAACD,qBAAqB,GAAGD,aAAa,CAACE,mBAAvC,MAAgE,IAAhE,IACAD,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;AAKA,UAAME,uBAAuB,GAAGR,OAAO,CACrCO,mBADqC,EAErC,UAACE,IAAD;AAAA,eAAUA,IAAI,CAACC,QAAL,CAAcC,IAAd,CAAmBC,KAA7B;AAAA,OAFqC,CAAvC;;AAXiC,iDAgBWJ,uBAhBX;AAAA;;AAAA;AAgBjC,4DAAqE;AAAA;AAAA,cAAzDK,YAAyD;AAAA,cAA3CC,aAA2C;;AACnE,cAAIA,aAAa,CAACC,MAAd,GAAuB,CAA3B,EAA8B;AAC5BZ,YAAAA,OAAO,CAACa,WAAR,CACE,IAAIf,YAAJ,mDAC4CY,YAD5C,UAEEC,aAAa,CAACG,GAAd,CAAkB,UAACR,IAAD;AAAA,qBAAUA,IAAI,CAACC,QAAL,CAAcC,IAAxB;AAAA,aAAlB,CAFF,CADF;AAMD;AACF;AAzBgC;AAAA;AAAA;AAAA;AAAA;AA0BlC;AA3BI,GAAP;AA6BD","sourcesContent":["import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              variableNodes.map((node) => node.variable.name),\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}