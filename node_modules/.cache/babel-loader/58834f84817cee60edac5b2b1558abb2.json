{"ast":null,"code":"import _createClass from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error ? thrownValue : new NonErrorThrown(thrownValue);\n}\n\nvar NonErrorThrown = /*#__PURE__*/function (_Error) {\n  _inherits(NonErrorThrown, _Error);\n\n  var _super = _createSuper(NonErrorThrown);\n\n  function NonErrorThrown(thrownValue) {\n    var _this;\n\n    _classCallCheck(this, NonErrorThrown);\n\n    _this = _super.call(this, 'Unexpected error value: ' + inspect(thrownValue));\n    _this.name = 'NonErrorThrown';\n    _this.thrownValue = thrownValue;\n    return _this;\n  }\n\n  return _createClass(NonErrorThrown);\n}( /*#__PURE__*/_wrapNativeSuper(Error));","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/jsutils/toError.mjs"],"names":["inspect","toError","thrownValue","Error","NonErrorThrown","name"],"mappings":";;;;;AAAA,SAASA,OAAT,QAAwB,eAAxB;AACA;AACA;AACA;;AAEA,OAAO,SAASC,OAAT,CAAiBC,WAAjB,EAA8B;AACnC,SAAOA,WAAW,YAAYC,KAAvB,GACHD,WADG,GAEH,IAAIE,cAAJ,CAAmBF,WAAnB,CAFJ;AAGD;;IAEKE,c;;;;;AACJ,0BAAYF,WAAZ,EAAyB;AAAA;;AAAA;;AACvB,8BAAM,6BAA6BF,OAAO,CAACE,WAAD,CAA1C;AACA,UAAKG,IAAL,GAAY,gBAAZ;AACA,UAAKH,WAAL,GAAmBA,WAAnB;AAHuB;AAIxB;;;iCAL0BC,K","sourcesContent":["import { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  constructor(thrownValue) {\n    super('Unexpected error value: ' + inspect(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}