{"ast":null,"code":"import _toConsumableArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\GATHU\\\\Desktop\\\\E-client\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, execute, getFieldDef } from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(_x) {\n  return _subscribe.apply(this, arguments);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nfunction _subscribe() {\n  _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args) {\n    var schema,\n        document,\n        rootValue,\n        contextValue,\n        variableValues,\n        operationName,\n        fieldResolver,\n        subscribeFieldResolver,\n        resultOrStream,\n        mapSourceToResponse,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Temporary for v15 to v16 migration. Remove in v17\n            _args.length < 2 || devAssert(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n            schema = args.schema, document = args.document, rootValue = args.rootValue, contextValue = args.contextValue, variableValues = args.variableValues, operationName = args.operationName, fieldResolver = args.fieldResolver, subscribeFieldResolver = args.subscribeFieldResolver;\n            _context.next = 4;\n            return createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n\n          case 4:\n            resultOrStream = _context.sent;\n\n            if (isAsyncIterable(resultOrStream)) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", resultOrStream);\n\n          case 7:\n            // For each payload yielded from a subscription, map it over the normal\n            // GraphQL `execute` function, with `payload` as the rootValue.\n            // This implements the \"MapSourceToResponseEvent\" algorithm described in\n            // the GraphQL specification. The `execute` function provides the\n            // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n            // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n            mapSourceToResponse = function mapSourceToResponse(payload) {\n              return execute({\n                schema: schema,\n                document: document,\n                rootValue: payload,\n                contextValue: contextValue,\n                variableValues: variableValues,\n                operationName: operationName,\n                fieldResolver: fieldResolver\n              });\n            }; // Map every source value to a ExecutionResult value as described above.\n\n\n            return _context.abrupt(\"return\", mapAsyncIterator(resultOrStream, mapSourceToResponse));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _subscribe.apply(this, arguments);\n}\n\nexport function createSourceEventStream(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction _createSourceEventStream() {\n  _createSourceEventStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver) {\n    var exeContext, eventStream;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // If arguments are missing or incorrectly typed, this is an internal\n            // developer mistake which should throw an early error.\n            assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n            // a \"Response\" with only errors is returned.\n\n            exeContext = buildExecutionContext({\n              schema: schema,\n              document: document,\n              rootValue: rootValue,\n              contextValue: contextValue,\n              variableValues: variableValues,\n              operationName: operationName,\n              subscribeFieldResolver: subscribeFieldResolver\n            }); // Return early errors if execution context failed.\n\n            if ('schema' in exeContext) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              errors: exeContext\n            });\n\n          case 4:\n            _context2.prev = 4;\n            _context2.next = 7;\n            return executeSubscription(exeContext);\n\n          case 7:\n            eventStream = _context2.sent;\n\n            if (isAsyncIterable(eventStream)) {\n              _context2.next = 10;\n              break;\n            }\n\n            throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat(inspect(eventStream), \".\"));\n\n          case 10:\n            return _context2.abrupt(\"return\", eventStream);\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](4);\n\n            if (!(_context2.t0 instanceof GraphQLError)) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              errors: [_context2.t0]\n            });\n\n          case 17:\n            throw _context2.t0;\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 13]]);\n  }));\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction executeSubscription(_x9) {\n  return _executeSubscription.apply(this, arguments);\n}\n\nfunction _executeSubscription() {\n  _executeSubscription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(exeContext) {\n    var schema, fragments, operation, variableValues, rootValue, rootType, rootFields, _, responseName, fieldNodes, fieldDef, fieldName, path, info, _fieldDef$subscribe, args, _contextValue, resolveFn, eventStream;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            schema = exeContext.schema, fragments = exeContext.fragments, operation = exeContext.operation, variableValues = exeContext.variableValues, rootValue = exeContext.rootValue;\n            rootType = schema.getSubscriptionType();\n\n            if (!(rootType == null)) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new GraphQLError('Schema is not configured to execute subscription operation.', operation);\n\n          case 4:\n            rootFields = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n            _ = _slicedToArray(_toConsumableArray(rootFields.entries())[0], 2), responseName = _[0], fieldNodes = _[1];\n            fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n            if (fieldDef) {\n              _context3.next = 10;\n              break;\n            }\n\n            fieldName = fieldNodes[0].name.value;\n            throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n\n          case 10:\n            path = addPath(undefined, responseName, rootType.name);\n            info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n            _context3.prev = 12;\n            // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n            // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n            // Build a JS object of arguments from the field.arguments AST, using the\n            // variables scope to fulfill any variable references.\n            args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n            // is provided to every resolve function within an execution. It is commonly\n            // used to represent an authenticated user, or request-specific caches.\n\n            _contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n            // AsyncIterable yielding raw payloads.\n\n            resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n            _context3.next = 18;\n            return resolveFn(rootValue, args, _contextValue, info);\n\n          case 18:\n            eventStream = _context3.sent;\n\n            if (!(eventStream instanceof Error)) {\n              _context3.next = 21;\n              break;\n            }\n\n            throw eventStream;\n\n          case 21:\n            return _context3.abrupt(\"return\", eventStream);\n\n          case 24:\n            _context3.prev = 24;\n            _context3.t0 = _context3[\"catch\"](12);\n            throw locatedError(_context3.t0, fieldNodes, pathToArray(path));\n\n          case 27:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[12, 24]]);\n  }));\n  return _executeSubscription.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/execution/subscribe.mjs"],"names":["devAssert","inspect","isAsyncIterable","addPath","pathToArray","GraphQLError","locatedError","collectFields","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","execute","getFieldDef","mapAsyncIterator","getArgumentValues","subscribe","args","length","schema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","createSourceEventStream","resultOrStream","mapSourceToResponse","payload","exeContext","errors","executeSubscription","eventStream","Error","fragments","operation","rootType","getSubscriptionType","rootFields","selectionSet","entries","responseName","fieldNodes","fieldDef","fieldName","name","value","path","undefined","info","resolveFn","_fieldDef$subscribe"],"mappings":"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","sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport {\n  assertValidExecutionArguments,\n  buildExecutionContext,\n  buildResolveInfo,\n  execute,\n  getFieldDef,\n} from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver,\n  } = args;\n  const resultOrStream = await createSourceEventStream(\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  );\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    execute({\n      schema,\n      document,\n      rootValue: payload,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n    }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(\n  schema,\n  document,\n  rootValue,\n  contextValue,\n  variableValues,\n  operationName,\n  subscribeFieldResolver,\n) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      operation,\n    );\n  }\n\n  const rootFields = collectFields(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      fieldNodes,\n    );\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}