{"ast":null,"code":"import _slicedToArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL type.\"));\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Scalar type.\"));\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Object type.\"));\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Interface type.\"));\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Union type.\"));\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Enum type.\"));\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Input Object type.\"));\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL List type.\"));\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Non-Null type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL input type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL output type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL leaf type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL composite type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL abstract type.\"));\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport var GraphQLList = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function GraphQLList(ofType) {\n    _classCallCheck(this, GraphQLList);\n\n    isType(ofType) || devAssert(false, \"Expected \".concat(inspect(ofType), \" to be a GraphQL type.\"));\n    this.ofType = ofType;\n  }\n\n  _createClass(GraphQLList, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'GraphQLList';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '[' + String(this.ofType) + ']';\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLList;\n}(Symbol.toStringTag);\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport var GraphQLNonNull = /*#__PURE__*/function (_Symbol$toStringTag2) {\n  function GraphQLNonNull(ofType) {\n    _classCallCheck(this, GraphQLNonNull);\n\n    isNullableType(ofType) || devAssert(false, \"Expected \".concat(inspect(ofType), \" to be a GraphQL nullable type.\"));\n    this.ofType = ofType;\n  }\n\n  _createClass(GraphQLNonNull, [{\n    key: _Symbol$toStringTag2,\n    get: function get() {\n      return 'GraphQLNonNull';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return String(this.ofType) + '!';\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLNonNull;\n}(Symbol.toStringTag);\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL wrapping type.\"));\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL nullable type.\"));\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL named type.\"));\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    var unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (value % 2 === 1) {\n *       return value;\n *     }\n *   }\n * });\n * ```\n */\n\nexport var GraphQLScalarType = /*#__PURE__*/function (_Symbol$toStringTag3) {\n  function GraphQLScalarType(config) {\n    _classCallCheck(this, GraphQLScalarType);\n\n    var _config$parseValue, _config$serialize, _config$parseLiteral, _config$extensionASTN;\n\n    var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function (node, variables) {\n      return parseValue(valueFromASTUntyped(node, variables));\n    };\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];\n    config.specifiedByURL == null || typeof config.specifiedByURL === 'string' || devAssert(false, \"\".concat(this.name, \" must provide \\\"specifiedByURL\\\" as a string, \") + \"but got: \".concat(inspect(config.specifiedByURL), \".\"));\n    config.serialize == null || typeof config.serialize === 'function' || devAssert(false, \"\".concat(this.name, \" must provide \\\"serialize\\\" function. If this custom Scalar is also used as an input type, ensure \\\"parseValue\\\" and \\\"parseLiteral\\\" functions are also provided.\"));\n\n    if (config.parseLiteral) {\n      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || devAssert(false, \"\".concat(this.name, \" must provide both \\\"parseValue\\\" and \\\"parseLiteral\\\" functions.\"));\n    }\n  }\n\n  _createClass(GraphQLScalarType, [{\n    key: _Symbol$toStringTag3,\n    get: function get() {\n      return 'GraphQLScalarType';\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      return {\n        name: this.name,\n        description: this.description,\n        specifiedByURL: this.specifiedByURL,\n        serialize: this.serialize,\n        parseValue: this.parseValue,\n        parseLiteral: this.parseLiteral,\n        extensions: this.extensions,\n        astNode: this.astNode,\n        extensionASTNodes: this.extensionASTNodes\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLScalarType;\n}(Symbol.toStringTag);\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\n\nexport var GraphQLObjectType = /*#__PURE__*/function (_Symbol$toStringTag4) {\n  function GraphQLObjectType(config) {\n    _classCallCheck(this, GraphQLObjectType);\n\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN2 = config.extensionASTNodes) !== null && _config$extensionASTN2 !== void 0 ? _config$extensionASTN2 : [];\n\n    this._fields = function () {\n      return defineFieldMap(config);\n    };\n\n    this._interfaces = function () {\n      return defineInterfaces(config);\n    };\n\n    config.isTypeOf == null || typeof config.isTypeOf === 'function' || devAssert(false, \"\".concat(this.name, \" must provide \\\"isTypeOf\\\" as a function, \") + \"but got: \".concat(inspect(config.isTypeOf), \".\"));\n  }\n\n  _createClass(GraphQLObjectType, [{\n    key: _Symbol$toStringTag4,\n    get: function get() {\n      return 'GraphQLObjectType';\n    }\n  }, {\n    key: \"getFields\",\n    value: function getFields() {\n      if (typeof this._fields === 'function') {\n        this._fields = this._fields();\n      }\n\n      return this._fields;\n    }\n  }, {\n    key: \"getInterfaces\",\n    value: function getInterfaces() {\n      if (typeof this._interfaces === 'function') {\n        this._interfaces = this._interfaces();\n      }\n\n      return this._interfaces;\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      return {\n        name: this.name,\n        description: this.description,\n        interfaces: this.getInterfaces(),\n        fields: fieldsToFieldsConfig(this.getFields()),\n        isTypeOf: this.isTypeOf,\n        extensions: this.extensions,\n        astNode: this.astNode,\n        extensionASTNodes: this.extensionASTNodes\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLObjectType;\n}(Symbol.toStringTag);\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  var interfaces = resolveReadonlyArrayThunk((_config$interfaces = config.interfaces) !== null && _config$interfaces !== void 0 ? _config$interfaces : []);\n  Array.isArray(interfaces) || devAssert(false, \"\".concat(config.name, \" interfaces must be an Array or a function which returns an Array.\"));\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  var fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(false, \"\".concat(config.name, \" fields must be an object with field names as keys or a function which returns such an object.\"));\n  return mapValue(fieldMap, function (fieldConfig, fieldName) {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) || devAssert(false, \"\".concat(config.name, \".\").concat(fieldName, \" field config must be an object.\"));\n    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || devAssert(false, \"\".concat(config.name, \".\").concat(fieldName, \" field resolver must be a function if \") + \"provided, but got: \".concat(inspect(fieldConfig.resolve), \".\"));\n    var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};\n    isPlainObj(argsConfig) || devAssert(false, \"\".concat(config.name, \".\").concat(fieldName, \" args must be an object with argument names as keys.\"));\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        argName = _ref2[0],\n        argConfig = _ref2[1];\n\n    return {\n      name: assertName(argName),\n      description: argConfig.description,\n      type: argConfig.type,\n      defaultValue: argConfig.defaultValue,\n      deprecationReason: argConfig.deprecationReason,\n      extensions: toObjMap(argConfig.extensions),\n      astNode: argConfig.astNode\n    };\n  });\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, function (field) {\n    return {\n      description: field.description,\n      type: field.type,\n      args: argsToArgsConfig(field.args),\n      resolve: field.resolve,\n      subscribe: field.subscribe,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode\n    };\n  });\n}\n/**\n * @internal\n */\n\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(args, function (arg) {\n    return arg.name;\n  }, function (arg) {\n    return {\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode\n    };\n  });\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\n\nexport var GraphQLInterfaceType = /*#__PURE__*/function (_Symbol$toStringTag5) {\n  function GraphQLInterfaceType(config) {\n    _classCallCheck(this, GraphQLInterfaceType);\n\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN3 = config.extensionASTNodes) !== null && _config$extensionASTN3 !== void 0 ? _config$extensionASTN3 : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(false, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\"));\n  }\n\n  _createClass(GraphQLInterfaceType, [{\n    key: _Symbol$toStringTag5,\n    get: function get() {\n      return 'GraphQLInterfaceType';\n    }\n  }, {\n    key: \"getFields\",\n    value: function getFields() {\n      if (typeof this._fields === 'function') {\n        this._fields = this._fields();\n      }\n\n      return this._fields;\n    }\n  }, {\n    key: \"getInterfaces\",\n    value: function getInterfaces() {\n      if (typeof this._interfaces === 'function') {\n        this._interfaces = this._interfaces();\n      }\n\n      return this._interfaces;\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      return {\n        name: this.name,\n        description: this.description,\n        interfaces: this.getInterfaces(),\n        fields: fieldsToFieldsConfig(this.getFields()),\n        resolveType: this.resolveType,\n        extensions: this.extensions,\n        astNode: this.astNode,\n        extensionASTNodes: this.extensionASTNodes\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLInterfaceType;\n}(Symbol.toStringTag);\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\n\nexport var GraphQLUnionType = /*#__PURE__*/function (_Symbol$toStringTag6) {\n  function GraphQLUnionType(config) {\n    _classCallCheck(this, GraphQLUnionType);\n\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN4 = config.extensionASTNodes) !== null && _config$extensionASTN4 !== void 0 ? _config$extensionASTN4 : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(false, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\"));\n  }\n\n  _createClass(GraphQLUnionType, [{\n    key: _Symbol$toStringTag6,\n    get: function get() {\n      return 'GraphQLUnionType';\n    }\n  }, {\n    key: \"getTypes\",\n    value: function getTypes() {\n      if (typeof this._types === 'function') {\n        this._types = this._types();\n      }\n\n      return this._types;\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      return {\n        name: this.name,\n        description: this.description,\n        types: this.getTypes(),\n        resolveType: this.resolveType,\n        extensions: this.extensions,\n        astNode: this.astNode,\n        extensionASTNodes: this.extensionASTNodes\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLUnionType;\n}(Symbol.toStringTag);\n\nfunction defineTypes(config) {\n  var types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) || devAssert(false, \"Must provide Array of types or a function which returns such an array for Union \".concat(config.name, \".\"));\n  return types;\n}\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\n\n\nexport var GraphQLEnumType = /*#__PURE__*/function (_Symbol$toStringTag7) {\n  /* <T> */\n  function GraphQLEnumType(config) {\n    _classCallCheck(this, GraphQLEnumType);\n\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN5 = config.extensionASTNodes) !== null && _config$extensionASTN5 !== void 0 ? _config$extensionASTN5 : [];\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(this._values.map(function (enumValue) {\n      return [enumValue.value, enumValue];\n    }));\n    this._nameLookup = keyMap(this._values, function (value) {\n      return value.name;\n    });\n  }\n\n  _createClass(GraphQLEnumType, [{\n    key: _Symbol$toStringTag7,\n    get: function get() {\n      return 'GraphQLEnumType';\n    }\n  }, {\n    key: \"getValues\",\n    value: function getValues() {\n      return this._values;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(name) {\n      return this._nameLookup[name];\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(outputValue) {\n      var enumValue = this._valueLookup.get(outputValue);\n\n      if (enumValue === undefined) {\n        throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent value: \").concat(inspect(outputValue)));\n      }\n\n      return enumValue.name;\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue(inputValue)\n    /* T */\n    {\n      if (typeof inputValue !== 'string') {\n        var valueStr = inspect(inputValue);\n        throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent non-string value: \").concat(valueStr, \".\") + didYouMeanEnumValue(this, valueStr));\n      }\n\n      var enumValue = this.getValue(inputValue);\n\n      if (enumValue == null) {\n        throw new GraphQLError(\"Value \\\"\".concat(inputValue, \"\\\" does not exist in \\\"\").concat(this.name, \"\\\" enum.\") + didYouMeanEnumValue(this, inputValue));\n      }\n\n      return enumValue.value;\n    }\n  }, {\n    key: \"parseLiteral\",\n    value: function parseLiteral(valueNode, _variables)\n    /* T */\n    {\n      // Note: variables will be resolved to a value before calling this function.\n      if (valueNode.kind !== Kind.ENUM) {\n        var valueStr = print(valueNode);\n        throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent non-enum value: \").concat(valueStr, \".\") + didYouMeanEnumValue(this, valueStr), valueNode);\n      }\n\n      var enumValue = this.getValue(valueNode.value);\n\n      if (enumValue == null) {\n        var _valueStr = print(valueNode);\n\n        throw new GraphQLError(\"Value \\\"\".concat(_valueStr, \"\\\" does not exist in \\\"\").concat(this.name, \"\\\" enum.\") + didYouMeanEnumValue(this, _valueStr), valueNode);\n      }\n\n      return enumValue.value;\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      var values = keyValMap(this.getValues(), function (value) {\n        return value.name;\n      }, function (value) {\n        return {\n          description: value.description,\n          value: value.value,\n          deprecationReason: value.deprecationReason,\n          extensions: value.extensions,\n          astNode: value.astNode\n        };\n      });\n      return {\n        name: this.name,\n        description: this.description,\n        values: values,\n        extensions: this.extensions,\n        astNode: this.astNode,\n        extensionASTNodes: this.extensionASTNodes\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLEnumType;\n}(Symbol.toStringTag);\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  var allNames = enumType.getValues().map(function (value) {\n    return value.name;\n  });\n  var suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) || devAssert(false, \"\".concat(typeName, \" values must be an object with value names as keys.\"));\n  return Object.entries(valueMap).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        valueName = _ref4[0],\n        valueConfig = _ref4[1];\n\n    isPlainObj(valueConfig) || devAssert(false, \"\".concat(typeName, \".\").concat(valueName, \" must refer to an object with a \\\"value\\\" key \") + \"representing an internal value but got: \".concat(inspect(valueConfig), \".\"));\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode\n    };\n  });\n}\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\n\n\nexport var GraphQLInputObjectType = /*#__PURE__*/function (_Symbol$toStringTag8) {\n  function GraphQLInputObjectType(config) {\n    _classCallCheck(this, GraphQLInputObjectType);\n\n    var _config$extensionASTN6;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN6 = config.extensionASTNodes) !== null && _config$extensionASTN6 !== void 0 ? _config$extensionASTN6 : [];\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  _createClass(GraphQLInputObjectType, [{\n    key: _Symbol$toStringTag8,\n    get: function get() {\n      return 'GraphQLInputObjectType';\n    }\n  }, {\n    key: \"getFields\",\n    value: function getFields() {\n      if (typeof this._fields === 'function') {\n        this._fields = this._fields();\n      }\n\n      return this._fields;\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      var fields = mapValue(this.getFields(), function (field) {\n        return {\n          description: field.description,\n          type: field.type,\n          defaultValue: field.defaultValue,\n          deprecationReason: field.deprecationReason,\n          extensions: field.extensions,\n          astNode: field.astNode\n        };\n      });\n      return {\n        name: this.name,\n        description: this.description,\n        fields: fields,\n        extensions: this.extensions,\n        astNode: this.astNode,\n        extensionASTNodes: this.extensionASTNodes\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.name;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }]);\n\n  return GraphQLInputObjectType;\n}(Symbol.toStringTag);\n\nfunction defineInputFieldMap(config) {\n  var fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(false, \"\".concat(config.name, \" fields must be an object with field names as keys or a function which returns such an object.\"));\n  return mapValue(fieldMap, function (fieldConfig, fieldName) {\n    !('resolve' in fieldConfig) || devAssert(false, \"\".concat(config.name, \".\").concat(fieldName, \" field has a resolve property, but Input Types cannot define resolvers.\"));\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/type/definition.mjs"],"names":["devAssert","didYouMean","identityFunc","inspect","instanceOf","isObjectLike","keyMap","keyValMap","mapValue","suggestionList","toObjMap","GraphQLError","Kind","print","valueFromASTUntyped","assertEnumValueName","assertName","isType","type","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","assertType","Error","GraphQLScalarType","assertScalarType","GraphQLObjectType","assertObjectType","GraphQLInterfaceType","assertInterfaceType","GraphQLUnionType","assertUnionType","GraphQLEnumType","assertEnumType","GraphQLInputObjectType","assertInputObjectType","GraphQLList","assertListType","GraphQLNonNull","assertNonNullType","isInputType","isWrappingType","ofType","assertInputType","isOutputType","assertOutputType","isLeafType","assertLeafType","isCompositeType","assertCompositeType","isAbstractType","assertAbstractType","String","toString","Symbol","toStringTag","isNullableType","assertWrappingType","assertNullableType","getNullableType","isNamedType","assertNamedType","getNamedType","unwrappedType","resolveReadonlyArrayThunk","thunk","resolveObjMapThunk","config","_config$parseValue","_config$serialize","_config$parseLiteral","_config$extensionASTN","parseValue","name","description","specifiedByURL","serialize","parseLiteral","node","variables","extensions","astNode","extensionASTNodes","_config$extensionASTN2","isTypeOf","_fields","defineFieldMap","_interfaces","defineInterfaces","interfaces","getInterfaces","fields","fieldsToFieldsConfig","getFields","_config$interfaces","Array","isArray","fieldMap","isPlainObj","fieldConfig","fieldName","_fieldConfig$args","resolve","argsConfig","args","defineArguments","subscribe","deprecationReason","Object","entries","map","argName","argConfig","defaultValue","obj","field","argsToArgsConfig","arg","isRequiredArgument","undefined","_config$extensionASTN3","resolveType","bind","_config$extensionASTN4","_types","defineTypes","types","getTypes","_config$extensionASTN5","_values","defineEnumValues","values","_valueLookup","Map","enumValue","value","_nameLookup","outputValue","get","inputValue","valueStr","didYouMeanEnumValue","getValue","valueNode","_variables","kind","ENUM","getValues","enumType","unknownValueStr","allNames","suggestedValues","typeName","valueMap","valueName","valueConfig","_config$extensionASTN6","defineInputFieldMap","isRequiredInputField"],"mappings":"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","sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      devAssert(\n        false,\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (value % 2 === 1) {\n *       return value;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${inspect(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        devAssert(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${inspect(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    devAssert(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: assertName(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: toObjMap(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    devAssert(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(\n      this._values.map((enumValue) => [enumValue.value, enumValue]),\n    );\n    this._nameLookup = keyMap(this._values, (value) => value.name);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    return this._values;\n  }\n\n  getValue(name) {\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        valueNode,\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        valueNode,\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    devAssert(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      devAssert(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\n      );\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n"]},"metadata":{},"sourceType":"module"}