{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\n\nexport function NoUnusedVariablesRule(context) {\n  var variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter: function enter() {\n        variableDefs = [];\n      },\n      leave: function leave(operation) {\n        var variableNameUsed = Object.create(null);\n        var usages = context.getRecursiveVariableUsages(operation);\n\n        var _iterator = _createForOfIteratorHelper(usages),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value.node;\n            variableNameUsed[node.name.value] = true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(variableDefs),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var variableDef = _step2.value;\n            var variableName = variableDef.variable.name.value;\n\n            if (variableNameUsed[variableName] !== true) {\n              context.reportError(new GraphQLError(operation.name ? \"Variable \\\"$\".concat(variableName, \"\\\" is never used in operation \\\"\").concat(operation.name.value, \"\\\".\") : \"Variable \\\"$\".concat(variableName, \"\\\" is never used.\"), variableDef));\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    },\n    VariableDefinition: function VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"],"names":["GraphQLError","NoUnusedVariablesRule","context","variableDefs","OperationDefinition","enter","leave","operation","variableNameUsed","Object","create","usages","getRecursiveVariableUsages","node","name","value","variableDef","variableName","variable","reportError","VariableDefinition","def","push"],"mappings":";AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7C,MAAIC,YAAY,GAAG,EAAnB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,KADmB,mBACX;AACNF,QAAAA,YAAY,GAAG,EAAf;AACD,OAHkB;AAKnBG,MAAAA,KALmB,iBAKbC,SALa,EAKF;AACf,YAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;AACA,YAAMC,MAAM,GAAGT,OAAO,CAACU,0BAAR,CAAmCL,SAAnC,CAAf;;AAFe,mDAIQI,MAJR;AAAA;;AAAA;AAIf,8DAA+B;AAAA,gBAAlBE,IAAkB,eAAlBA,IAAkB;AAC7BL,YAAAA,gBAAgB,CAACK,IAAI,CAACC,IAAL,CAAUC,KAAX,CAAhB,GAAoC,IAApC;AACD;AANc;AAAA;AAAA;AAAA;AAAA;;AAAA,oDAQWZ,YARX;AAAA;;AAAA;AAQf,iEAAwC;AAAA,gBAA7Ba,WAA6B;AACtC,gBAAMC,YAAY,GAAGD,WAAW,CAACE,QAAZ,CAAqBJ,IAArB,CAA0BC,KAA/C;;AAEA,gBAAIP,gBAAgB,CAACS,YAAD,CAAhB,KAAmC,IAAvC,EAA6C;AAC3Cf,cAAAA,OAAO,CAACiB,WAAR,CACE,IAAInB,YAAJ,CACEO,SAAS,CAACO,IAAV,yBACkBG,YADlB,6CAC+DV,SAAS,CAACO,IAAV,CAAeC,KAD9E,iCAEkBE,YAFlB,sBADF,EAIED,WAJF,CADF;AAQD;AACF;AArBc;AAAA;AAAA;AAAA;AAAA;AAsBhB;AA3BkB,KADhB;AA+BLI,IAAAA,kBA/BK,8BA+BcC,GA/Bd,EA+BmB;AACtBlB,MAAAA,YAAY,CAACmB,IAAb,CAAkBD,GAAlB;AACD;AAjCI,GAAP;AAmCD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                variableDef,\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}