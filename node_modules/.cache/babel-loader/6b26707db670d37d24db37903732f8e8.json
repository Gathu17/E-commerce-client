{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\n\nexport function NoUnusedFragmentsRule(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        var _iterator = _createForOfIteratorHelper(operationDefs),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var operation = _step.value;\n\n            var _iterator3 = _createForOfIteratorHelper(context.getRecursivelyReferencedFragments(operation)),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var fragment = _step3.value;\n                fragmentNameUsed[fragment.name.value] = true;\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(fragmentDefs),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var fragmentDef = _step2.value;\n            var fragName = fragmentDef.name.value;\n\n            if (fragmentNameUsed[fragName] !== true) {\n              context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" is never used.\"), fragmentDef));\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"],"names":["GraphQLError","NoUnusedFragmentsRule","context","operationDefs","fragmentDefs","OperationDefinition","node","push","FragmentDefinition","Document","leave","fragmentNameUsed","Object","create","operation","getRecursivelyReferencedFragments","fragment","name","value","fragmentDef","fragName","reportError"],"mappings":";AAAA,SAASA,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7C,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,SAAO;AACLC,IAAAA,mBADK,+BACeC,IADf,EACqB;AACxBH,MAAAA,aAAa,CAACI,IAAd,CAAmBD,IAAnB;AACA,aAAO,KAAP;AACD,KAJI;AAMLE,IAAAA,kBANK,8BAMcF,IANd,EAMoB;AACvBF,MAAAA,YAAY,CAACG,IAAb,CAAkBD,IAAlB;AACA,aAAO,KAAP;AACD,KATI;AAWLG,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KADQ,mBACA;AACN,YAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;;AADM,mDAGkBV,aAHlB;AAAA;;AAAA;AAGN,8DAAuC;AAAA,gBAA5BW,SAA4B;;AAAA,wDACdZ,OAAO,CAACa,iCAAR,CACrBD,SADqB,CADc;AAAA;;AAAA;AACrC,qEAEG;AAAA,oBAFQE,QAER;AACDL,gBAAAA,gBAAgB,CAACK,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAhB,GAAwC,IAAxC;AACD;AALoC;AAAA;AAAA;AAAA;AAAA;AAMtC;AATK;AAAA;AAAA;AAAA;AAAA;;AAAA,oDAWoBd,YAXpB;AAAA;;AAAA;AAWN,iEAAwC;AAAA,gBAA7Be,WAA6B;AACtC,gBAAMC,QAAQ,GAAGD,WAAW,CAACF,IAAZ,CAAiBC,KAAlC;;AAEA,gBAAIP,gBAAgB,CAACS,QAAD,CAAhB,KAA+B,IAAnC,EAAyC;AACvClB,cAAAA,OAAO,CAACmB,WAAR,CACE,IAAIrB,YAAJ,sBACeoB,QADf,wBAEED,WAFF,CADF;AAMD;AACF;AAtBK;AAAA;AAAA;AAAA;AAAA;AAuBP;AAxBO;AAXL,GAAP;AAsCD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                `Fragment \"${fragName}\" is never used.`,\n                fragmentDef,\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}