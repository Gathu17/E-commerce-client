{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport { printLocation, printSourceLocation } from '../language/printLocation.mjs';\n\nfunction toNormalizedArgs(args) {\n  var firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5]\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\n\nexport var GraphQLError = /*#__PURE__*/function (_Error, _Symbol$toStringTag) {\n  _inherits(GraphQLError, _Error);\n\n  var _super = _createSuper(GraphQLError);\n\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.\n   */\n  function GraphQLError(message) {\n    var _this;\n\n    _classCallCheck(this, GraphQLError);\n\n    var _this$nodes, _nodeLocations$, _ref;\n\n    for (var _len = arguments.length, rawArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rawArgs[_key - 1] = arguments[_key];\n    }\n\n    var _toNormalizedArgs = toNormalizedArgs(rawArgs),\n        nodes = _toNormalizedArgs.nodes,\n        source = _toNormalizedArgs.source,\n        positions = _toNormalizedArgs.positions,\n        path = _toNormalizedArgs.path,\n        originalError = _toNormalizedArgs.originalError,\n        extensions = _toNormalizedArgs.extensions;\n\n    _this = _super.call(this, message);\n    _this.name = 'GraphQLError';\n    _this.path = path !== null && path !== void 0 ? path : undefined;\n    _this.originalError = originalError !== null && originalError !== void 0 ? originalError : undefined; // Compute list of blame nodes.\n\n    _this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined);\n    var nodeLocations = undefinedIfEmpty((_this$nodes = _this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map(function (node) {\n      return node.loc;\n    }).filter(function (loc) {\n      return loc != null;\n    })); // Compute locations in the source for the given nodes/positions.\n\n    _this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;\n    _this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(function (loc) {\n      return loc.start;\n    });\n    _this.locations = positions && source ? positions.map(function (pos) {\n      return getLocation(source, pos);\n    }) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map(function (loc) {\n      return getLocation(loc.source, loc.start);\n    });\n    var originalExtensions = isObjectLike(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : undefined;\n    _this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(_assertThisInitialized(_this), {\n      message: {\n        writable: true,\n        enumerable: true\n      },\n      name: {\n        enumerable: false\n      },\n      nodes: {\n        enumerable: false\n      },\n      source: {\n        enumerable: false\n      },\n      positions: {\n        enumerable: false\n      },\n      originalError: {\n        enumerable: false\n      }\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (originalError !== null && originalError !== void 0 && originalError.stack) {\n      Object.defineProperty(_assertThisInitialized(_this), 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError);\n    } else {\n      Object.defineProperty(_assertThisInitialized(_this), 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n    /* c8 ignore stop */\n\n\n    return _this;\n  }\n\n  _createClass(GraphQLError, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'GraphQLError';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var output = this.message;\n\n      if (this.nodes) {\n        var _iterator = _createForOfIteratorHelper(this.nodes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var node = _step.value;\n\n            if (node.loc) {\n              output += '\\n\\n' + printLocation(node.loc);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (this.source && this.locations) {\n        var _iterator2 = _createForOfIteratorHelper(this.locations),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var location = _step2.value;\n            output += '\\n\\n' + printSourceLocation(this.source, location);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      return output;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var formattedError = {\n        message: this.message\n      };\n\n      if (this.locations != null) {\n        formattedError.locations = this.locations;\n      }\n\n      if (this.path != null) {\n        formattedError.path = this.path;\n      }\n\n      if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n        formattedError.extensions = this.extensions;\n      }\n\n      return formattedError;\n    }\n  }]);\n\n  return GraphQLError;\n}( /*#__PURE__*/_wrapNativeSuper(Error), Symbol.toStringTag);\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\n\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/error/GraphQLError.mjs"],"names":["isObjectLike","getLocation","printLocation","printSourceLocation","toNormalizedArgs","args","firstArg","nodes","source","positions","path","originalError","extensions","GraphQLError","message","_this$nodes","_nodeLocations$","_ref","rawArgs","name","undefined","undefinedIfEmpty","Array","isArray","nodeLocations","map","node","loc","filter","start","locations","pos","originalExtensions","Object","create","defineProperties","writable","enumerable","stack","defineProperty","value","configurable","Error","captureStackTrace","output","location","formattedError","keys","length","Symbol","toStringTag","array","printError","error","toString","formatError","toJSON"],"mappings":";;;;;;;AAAA,SAASA,YAAT,QAA6B,6BAA7B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SACEC,aADF,EAEEC,mBAFF,QAGO,+BAHP;;AAKA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,MAAMC,QAAQ,GAAGD,IAAI,CAAC,CAAD,CAArB;;AAEA,MAAIC,QAAQ,IAAI,IAAZ,IAAoB,UAAUA,QAA9B,IAA0C,YAAYA,QAA1D,EAAoE;AAClE,WAAO;AACLC,MAAAA,KAAK,EAAED,QADF;AAELE,MAAAA,MAAM,EAAEH,IAAI,CAAC,CAAD,CAFP;AAGLI,MAAAA,SAAS,EAAEJ,IAAI,CAAC,CAAD,CAHV;AAILK,MAAAA,IAAI,EAAEL,IAAI,CAAC,CAAD,CAJL;AAKLM,MAAAA,aAAa,EAAEN,IAAI,CAAC,CAAD,CALd;AAMLO,MAAAA,UAAU,EAAEP,IAAI,CAAC,CAAD;AANX,KAAP;AAQD;;AAED,SAAOC,QAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAAaO,YAAb;AAAA;;AAAA;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;;AAEE;AACF;AACA;AACE,wBAAYC,OAAZ,EAAiC;AAAA;;AAAA;;AAC/B,QAAIC,WAAJ,EAAiBC,eAAjB,EAAkCC,IAAlC;;AAD+B,sCAATC,OAAS;AAATA,MAAAA,OAAS;AAAA;;AAG/B,4BACEd,gBAAgB,CAACc,OAAD,CADlB;AAAA,QAAQX,KAAR,qBAAQA,KAAR;AAAA,QAAeC,MAAf,qBAAeA,MAAf;AAAA,QAAuBC,SAAvB,qBAAuBA,SAAvB;AAAA,QAAkCC,IAAlC,qBAAkCA,IAAlC;AAAA,QAAwCC,aAAxC,qBAAwCA,aAAxC;AAAA,QAAuDC,UAAvD,qBAAuDA,UAAvD;;AAEA,8BAAME,OAAN;AACA,UAAKK,IAAL,GAAY,cAAZ;AACA,UAAKT,IAAL,GAAYA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmCA,IAAnC,GAA0CU,SAAtD;AACA,UAAKT,aAAL,GACEA,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GACIA,aADJ,GAEIS,SAHN,CAR+B,CAWd;;AAEjB,UAAKb,KAAL,GAAac,gBAAgB,CAC3BC,KAAK,CAACC,OAAN,CAAchB,KAAd,IAAuBA,KAAvB,GAA+BA,KAAK,GAAG,CAACA,KAAD,CAAH,GAAaa,SADtB,CAA7B;AAGA,QAAMI,aAAa,GAAGH,gBAAgB,CACpC,CAACN,WAAW,GAAG,MAAKR,KAApB,MAA+B,IAA/B,IAAuCQ,WAAW,KAAK,KAAK,CAA5D,GACI,KAAK,CADT,GAEIA,WAAW,CAACU,GAAZ,CAAgB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,GAAf;AAAA,KAAhB,EAAoCC,MAApC,CAA2C,UAACD,GAAD;AAAA,aAASA,GAAG,IAAI,IAAhB;AAAA,KAA3C,CAHgC,CAAtC,CAhB+B,CAoB5B;;AAEH,UAAKnB,MAAL,GACEA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GACIA,MADJ,GAEIgB,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GACA,KAAK,CADL,GAEA,CAACR,eAAe,GAAGQ,aAAa,CAAC,CAAD,CAAhC,MAAyC,IAAzC,IACAR,eAAe,KAAK,KAAK,CADzB,GAEA,KAAK,CAFL,GAGAA,eAAe,CAACR,MARtB;AASA,UAAKC,SAAL,GACEA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GACIA,SADJ,GAEIe,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GACA,KAAK,CADL,GAEAA,aAAa,CAACC,GAAd,CAAkB,UAACE,GAAD;AAAA,aAASA,GAAG,CAACE,KAAb;AAAA,KAAlB,CALN;AAMA,UAAKC,SAAL,GACErB,SAAS,IAAID,MAAb,GACIC,SAAS,CAACgB,GAAV,CAAc,UAACM,GAAD;AAAA,aAAS9B,WAAW,CAACO,MAAD,EAASuB,GAAT,CAApB;AAAA,KAAd,CADJ,GAEIP,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GACA,KAAK,CADL,GAEAA,aAAa,CAACC,GAAd,CAAkB,UAACE,GAAD;AAAA,aAAS1B,WAAW,CAAC0B,GAAG,CAACnB,MAAL,EAAamB,GAAG,CAACE,KAAjB,CAApB;AAAA,KAAlB,CALN;AAMA,QAAMG,kBAAkB,GAAGhC,YAAY,CACrCW,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GACI,KAAK,CADT,GAEIA,aAAa,CAACC,UAHmB,CAAZ,GAKvBD,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GACE,KAAK,CADP,GAEEA,aAAa,CAACC,UAPO,GAQvBQ,SARJ;AASA,UAAKR,UAAL,GACE,CAACK,IAAI,GACHL,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GACIA,UADJ,GAEIoB,kBAHN,MAG8B,IAH9B,IAGsCf,IAAI,KAAK,KAAK,CAHpD,GAIIA,IAJJ,GAKIgB,MAAM,CAACC,MAAP,CAAc,IAAd,CANN,CApD+B,CA0DJ;AAC3B;;AAEAD,IAAAA,MAAM,CAACE,gBAAP,gCAA8B;AAC5BrB,MAAAA,OAAO,EAAE;AACPsB,QAAAA,QAAQ,EAAE,IADH;AAEPC,QAAAA,UAAU,EAAE;AAFL,OADmB;AAK5BlB,MAAAA,IAAI,EAAE;AACJkB,QAAAA,UAAU,EAAE;AADR,OALsB;AAQ5B9B,MAAAA,KAAK,EAAE;AACL8B,QAAAA,UAAU,EAAE;AADP,OARqB;AAW5B7B,MAAAA,MAAM,EAAE;AACN6B,QAAAA,UAAU,EAAE;AADN,OAXoB;AAc5B5B,MAAAA,SAAS,EAAE;AACT4B,QAAAA,UAAU,EAAE;AADH,OAdiB;AAiB5B1B,MAAAA,aAAa,EAAE;AACb0B,QAAAA,UAAU,EAAE;AADC;AAjBa,KAA9B,EA7D+B,CAiF3B;;AAEJ;AACA;;AAEA,QACE1B,aAAa,KAAK,IAAlB,IACAA,aAAa,KAAK,KAAK,CADvB,IAEAA,aAAa,CAAC2B,KAHhB,EAIE;AACAL,MAAAA,MAAM,CAACM,cAAP,gCAA4B,OAA5B,EAAqC;AACnCC,QAAAA,KAAK,EAAE7B,aAAa,CAAC2B,KADc;AAEnCF,QAAAA,QAAQ,EAAE,IAFyB;AAGnCK,QAAAA,YAAY,EAAE;AAHqB,OAArC;AAKD,KAVD,MAUO,IAAIC,KAAK,CAACC,iBAAV,EAA6B;AAClCD,MAAAA,KAAK,CAACC,iBAAN,gCAA8B9B,YAA9B;AACD,KAFM,MAEA;AACLoB,MAAAA,MAAM,CAACM,cAAP,gCAA4B,OAA5B,EAAqC;AACnCC,QAAAA,KAAK,EAAEE,KAAK,GAAGJ,KADoB;AAEnCF,QAAAA,QAAQ,EAAE,IAFyB;AAGnCK,QAAAA,YAAY,EAAE;AAHqB,OAArC;AAKD;AACD;;;AAzG+B;AA0GhC;;AAxJH;AAAA;AAAA,SA0JE,eAA2B;AACzB,aAAO,cAAP;AACD;AA5JH;AAAA;AAAA,WA8JE,oBAAW;AACT,UAAIG,MAAM,GAAG,KAAK9B,OAAlB;;AAEA,UAAI,KAAKP,KAAT,EAAgB;AAAA,mDACK,KAAKA,KADV;AAAA;;AAAA;AACd,8DAA+B;AAAA,gBAApBmB,IAAoB;;AAC7B,gBAAIA,IAAI,CAACC,GAAT,EAAc;AACZiB,cAAAA,MAAM,IAAI,SAAS1C,aAAa,CAACwB,IAAI,CAACC,GAAN,CAAhC;AACD;AACF;AALa;AAAA;AAAA;AAAA;AAAA;AAMf,OAND,MAMO,IAAI,KAAKnB,MAAL,IAAe,KAAKsB,SAAxB,EAAmC;AAAA,oDACjB,KAAKA,SADY;AAAA;;AAAA;AACxC,iEAAuC;AAAA,gBAA5Be,QAA4B;AACrCD,YAAAA,MAAM,IAAI,SAASzC,mBAAmB,CAAC,KAAKK,MAAN,EAAcqC,QAAd,CAAtC;AACD;AAHuC;AAAA;AAAA;AAAA;AAAA;AAIzC;;AAED,aAAOD,MAAP;AACD;AA9KH;AAAA;AAAA,WAgLE,kBAAS;AACP,UAAME,cAAc,GAAG;AACrBhC,QAAAA,OAAO,EAAE,KAAKA;AADO,OAAvB;;AAIA,UAAI,KAAKgB,SAAL,IAAkB,IAAtB,EAA4B;AAC1BgB,QAAAA,cAAc,CAAChB,SAAf,GAA2B,KAAKA,SAAhC;AACD;;AAED,UAAI,KAAKpB,IAAL,IAAa,IAAjB,EAAuB;AACrBoC,QAAAA,cAAc,CAACpC,IAAf,GAAsB,KAAKA,IAA3B;AACD;;AAED,UAAI,KAAKE,UAAL,IAAmB,IAAnB,IAA2BqB,MAAM,CAACc,IAAP,CAAY,KAAKnC,UAAjB,EAA6BoC,MAA7B,GAAsC,CAArE,EAAwE;AACtEF,QAAAA,cAAc,CAAClC,UAAf,GAA4B,KAAKA,UAAjC;AACD;;AAED,aAAOkC,cAAP;AACD;AAlMH;;AAAA;AAAA,iCAAkCJ,KAAlC,GA0JOO,MAAM,CAACC,WA1Jd;;AAqMA,SAAS7B,gBAAT,CAA0B8B,KAA1B,EAAiC;AAC/B,SAAOA,KAAK,KAAK/B,SAAV,IAAuB+B,KAAK,CAACH,MAAN,KAAiB,CAAxC,GAA4C5B,SAA5C,GAAwD+B,KAA/D;AACD;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAChC,SAAOA,KAAK,CAACC,QAAN,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBF,KAArB,EAA4B;AACjC,SAAOA,KAAK,CAACG,MAAN,EAAP;AACD","sourcesContent":["import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorArgs` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedArgs(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n"]},"metadata":{},"sourceType":"module"}