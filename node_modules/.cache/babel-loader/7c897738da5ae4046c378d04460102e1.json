{"ast":null,"code":"import _objectSpread from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return _objectSpread(_objectSpread({}, valueNode), {}, {\n        fields: sortFields(valueNode.fields)\n      });\n\n    case Kind.LIST:\n      return _objectSpread(_objectSpread({}, valueNode), {}, {\n        values: valueNode.values.map(sortValueNode)\n      });\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields.map(function (fieldNode) {\n    return _objectSpread(_objectSpread({}, fieldNode), {}, {\n      value: sortValueNode(fieldNode.value)\n    });\n  }).sort(function (fieldA, fieldB) {\n    return naturalCompare(fieldA.name.value, fieldB.name.value);\n  });\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/utilities/sortValueNode.mjs"],"names":["naturalCompare","Kind","sortValueNode","valueNode","kind","OBJECT","fields","sortFields","LIST","values","map","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","VARIABLE","fieldNode","value","sort","fieldA","fieldB","name"],"mappings":";AAAA,SAASA,cAAT,QAA+B,+BAA/B;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AACvC,UAAQA,SAAS,CAACC,IAAlB;AACE,SAAKH,IAAI,CAACI,MAAV;AACE,6CAAYF,SAAZ;AAAuBG,QAAAA,MAAM,EAAEC,UAAU,CAACJ,SAAS,CAACG,MAAX;AAAzC;;AAEF,SAAKL,IAAI,CAACO,IAAV;AACE,6CAAYL,SAAZ;AAAuBM,QAAAA,MAAM,EAAEN,SAAS,CAACM,MAAV,CAAiBC,GAAjB,CAAqBR,aAArB;AAA/B;;AAEF,SAAKD,IAAI,CAACU,GAAV;AACA,SAAKV,IAAI,CAACW,KAAV;AACA,SAAKX,IAAI,CAACY,MAAV;AACA,SAAKZ,IAAI,CAACa,OAAV;AACA,SAAKb,IAAI,CAACc,IAAV;AACA,SAAKd,IAAI,CAACe,IAAV;AACA,SAAKf,IAAI,CAACgB,QAAV;AACE,aAAOd,SAAP;AAdJ;AAgBD;;AAED,SAASI,UAAT,CAAoBD,MAApB,EAA4B;AAC1B,SAAOA,MAAM,CACVI,GADI,CACA,UAACQ,SAAD;AAAA,2CACAA,SADA;AAEHC,MAAAA,KAAK,EAAEjB,aAAa,CAACgB,SAAS,CAACC,KAAX;AAFjB;AAAA,GADA,EAKJC,IALI,CAKC,UAACC,MAAD,EAASC,MAAT;AAAA,WACJtB,cAAc,CAACqB,MAAM,CAACE,IAAP,CAAYJ,KAAb,EAAoBG,MAAM,CAACC,IAAP,CAAYJ,KAAhC,CADV;AAAA,GALD,CAAP;AAQD","sourcesContent":["import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n"]},"metadata":{},"sourceType":"module"}