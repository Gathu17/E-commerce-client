{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\n\nexport function KnownArgumentNamesRule(context) {\n  return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {\n    Argument: function Argument(argNode) {\n      var argDef = context.getArgument();\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        var argName = argNode.name.value;\n        var knownArgsNames = fieldDef.args.map(function (arg) {\n          return arg.name;\n        });\n        var suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on field \\\"\").concat(parentType.name, \".\").concat(fieldDef.name, \"\\\".\") + didYouMean(suggestions), argNode));\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  var directiveArgs = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  var _iterator = _createForOfIteratorHelper(definedDirectives),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var directive = _step.value;\n      directiveArgs[directive.name] = directive.args.map(function (arg) {\n        return arg.name;\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n\n  var _iterator2 = _createForOfIteratorHelper(astDefinitions),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var def = _step2.value;\n\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        var _def$arguments; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n        /* c8 ignore next */\n\n\n        var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n        directiveArgs[def.name.value] = argsNodes.map(function (arg) {\n          return arg.name.value;\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    Directive: function Directive(directiveNode) {\n      var directiveName = directiveNode.name.value;\n      var knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        var _iterator3 = _createForOfIteratorHelper(directiveNode.arguments),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var argNode = _step3.value;\n            var argName = argNode.name.value;\n\n            if (!knownArgs.includes(argName)) {\n              var suggestions = suggestionList(argName, knownArgs);\n              context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on directive \\\"@\").concat(directiveName, \"\\\".\") + didYouMean(suggestions), argNode));\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      return false;\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs"],"names":["didYouMean","suggestionList","GraphQLError","Kind","specifiedDirectives","KnownArgumentNamesRule","context","KnownArgumentNamesOnDirectivesRule","Argument","argNode","argDef","getArgument","fieldDef","getFieldDef","parentType","getParentType","argName","name","value","knownArgsNames","args","map","arg","suggestions","reportError","directiveArgs","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","_def$arguments","argsNodes","arguments","Directive","directiveNode","directiveName","knownArgs","includes"],"mappings":"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","sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            argNode,\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                argNode,\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}