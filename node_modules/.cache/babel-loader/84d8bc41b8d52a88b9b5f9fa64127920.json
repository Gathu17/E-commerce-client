{"ast":null,"code":"import _toConsumableArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\n\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        var schema = context.getSchema();\n        var subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          var operationName = node.name ? node.name.value : null;\n          var variableValues = Object.create(null);\n          var document = context.getDocument();\n          var fragments = Object.create(null);\n\n          var _iterator = _createForOfIteratorHelper(document.definitions),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var definition = _step.value;\n\n              if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n                fragments[definition.name.value] = definition;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var fields = collectFields(schema, fragments, variableValues, subscriptionType, node.selectionSet);\n\n          if (fields.size > 1) {\n            var fieldSelectionLists = _toConsumableArray(fields.values());\n\n            var extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            var extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(new GraphQLError(operationName != null ? \"Subscription \\\"\".concat(operationName, \"\\\" must select only one top level field.\") : 'Anonymous Subscription must select only one top level field.', extraFieldSelections));\n          }\n\n          var _iterator2 = _createForOfIteratorHelper(fields.values()),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var fieldNodes = _step2.value;\n              var field = fieldNodes[0];\n              var fieldName = field.name.value;\n\n              if (fieldName.startsWith('__')) {\n                context.reportError(new GraphQLError(operationName != null ? \"Subscription \\\"\".concat(operationName, \"\\\" must not select an introspection top level field.\") : 'Anonymous Subscription must not select an introspection top level field.', fieldNodes));\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs"],"names":["GraphQLError","Kind","collectFields","SingleFieldSubscriptionsRule","context","OperationDefinition","node","operation","schema","getSchema","subscriptionType","getSubscriptionType","operationName","name","value","variableValues","Object","create","document","getDocument","fragments","definitions","definition","kind","FRAGMENT_DEFINITION","fields","selectionSet","size","fieldSelectionLists","values","extraFieldSelectionLists","slice","extraFieldSelections","flat","reportError","fieldNodes","field","fieldName","startsWith"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,8BAA7B;AACA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,aAAT,QAA8B,mCAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,4BAAT,CAAsCC,OAAtC,EAA+C;AACpD,SAAO;AACLC,IAAAA,mBADK,+BACeC,IADf,EACqB;AACxB,UAAIA,IAAI,CAACC,SAAL,KAAmB,cAAvB,EAAuC;AACrC,YAAMC,MAAM,GAAGJ,OAAO,CAACK,SAAR,EAAf;AACA,YAAMC,gBAAgB,GAAGF,MAAM,CAACG,mBAAP,EAAzB;;AAEA,YAAID,gBAAJ,EAAsB;AACpB,cAAME,aAAa,GAAGN,IAAI,CAACO,IAAL,GAAYP,IAAI,CAACO,IAAL,CAAUC,KAAtB,GAA8B,IAApD;AACA,cAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;AACA,cAAMC,QAAQ,GAAGd,OAAO,CAACe,WAAR,EAAjB;AACA,cAAMC,SAAS,GAAGJ,MAAM,CAACC,MAAP,CAAc,IAAd,CAAlB;;AAJoB,qDAMKC,QAAQ,CAACG,WANd;AAAA;;AAAA;AAMpB,gEAA+C;AAAA,kBAApCC,UAAoC;;AAC7C,kBAAIA,UAAU,CAACC,IAAX,KAAoBtB,IAAI,CAACuB,mBAA7B,EAAkD;AAChDJ,gBAAAA,SAAS,CAACE,UAAU,CAACT,IAAX,CAAgBC,KAAjB,CAAT,GAAmCQ,UAAnC;AACD;AACF;AAVmB;AAAA;AAAA;AAAA;AAAA;;AAYpB,cAAMG,MAAM,GAAGvB,aAAa,CAC1BM,MAD0B,EAE1BY,SAF0B,EAG1BL,cAH0B,EAI1BL,gBAJ0B,EAK1BJ,IAAI,CAACoB,YALqB,CAA5B;;AAQA,cAAID,MAAM,CAACE,IAAP,GAAc,CAAlB,EAAqB;AACnB,gBAAMC,mBAAmB,sBAAOH,MAAM,CAACI,MAAP,EAAP,CAAzB;;AACA,gBAAMC,wBAAwB,GAAGF,mBAAmB,CAACG,KAApB,CAA0B,CAA1B,CAAjC;AACA,gBAAMC,oBAAoB,GAAGF,wBAAwB,CAACG,IAAzB,EAA7B;AACA7B,YAAAA,OAAO,CAAC8B,WAAR,CACE,IAAIlC,YAAJ,CACEY,aAAa,IAAI,IAAjB,4BACqBA,aADrB,gDAEI,8DAHN,EAIEoB,oBAJF,CADF;AAQD;;AAhCmB,sDAkCKP,MAAM,CAACI,MAAP,EAlCL;AAAA;;AAAA;AAkCpB,mEAA0C;AAAA,kBAA/BM,UAA+B;AACxC,kBAAMC,KAAK,GAAGD,UAAU,CAAC,CAAD,CAAxB;AACA,kBAAME,SAAS,GAAGD,KAAK,CAACvB,IAAN,CAAWC,KAA7B;;AAEA,kBAAIuB,SAAS,CAACC,UAAV,CAAqB,IAArB,CAAJ,EAAgC;AAC9BlC,gBAAAA,OAAO,CAAC8B,WAAR,CACE,IAAIlC,YAAJ,CACEY,aAAa,IAAI,IAAjB,4BACqBA,aADrB,4DAEI,0EAHN,EAIEuB,UAJF,CADF;AAQD;AACF;AAhDmB;AAAA;AAAA;AAAA;AAAA;AAiDrB;AACF;AACF;AAzDI,GAAP;AA2DD","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                extraFieldSelections,\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  fieldNodes,\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}