{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nexport function onError(errorHandler) {\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var sub;\n      var retriedSub;\n      var retriedResult;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: function next(result) {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation: operation,\n                forward: forward\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer)\n                });\n                return;\n              }\n            }\n\n            observer.next(result);\n          },\n          error: function error(networkError) {\n            retriedResult = errorHandler({\n              operation: operation,\n              networkError: networkError,\n              graphQLErrors: networkError && networkError.result && networkError.result.errors,\n              forward: forward\n            });\n\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n              });\n              return;\n            }\n\n            observer.error(networkError);\n          },\n          complete: function complete() {\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          }\n        });\n      } catch (e) {\n        errorHandler({\n          networkError: e,\n          operation: operation,\n          forward: forward\n        });\n        observer.error(e);\n      }\n\n      return function () {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nvar ErrorLink = function (_super) {\n  __extends(ErrorLink, _super);\n\n  function ErrorLink(errorHandler) {\n    var _this = _super.call(this) || this;\n\n    _this.link = onError(errorHandler);\n    return _this;\n  }\n\n  ErrorLink.prototype.request = function (operation, forward) {\n    return this.link.request(operation, forward);\n  };\n\n  return ErrorLink;\n}(ApolloLink);\n\nexport { ErrorLink };","map":{"version":3,"mappings":"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","names":["Observable","ApolloLink","onError","errorHandler","operation","forward","sub","retriedSub","retriedResult","subscribe","next","result","errors","graphQLErrors","response","observer","bind","error","complete","networkError","e","unsubscribe","__extends","_super","_this","link","ErrorLink","request"],"sources":["C:\\Users\\GATHU\\Desktop\\E-client\\node_modules\\@apollo\\src\\link\\error\\index.ts"],"sourcesContent":["import { ExecutionResult } from 'graphql';\n\nimport { NetworkError, GraphQLErrors } from '../../errors';\nimport { Observable } from '../../utilities';\nimport { ApolloLink, Operation, FetchResult, NextLink } from '../core';\n\nexport interface ErrorResponse {\n  graphQLErrors?: GraphQLErrors;\n  networkError?: NetworkError;\n  response?: ExecutionResult;\n  operation: Operation;\n  forward: NextLink;\n}\n\nexport namespace ErrorLink {\n  /**\n   * Callback to be triggered when an error occurs within the link stack.\n   */\n  export interface ErrorHandler {\n    (error: ErrorResponse): Observable<FetchResult> | void;\n  }\n}\n\n// For backwards compatibility.\nexport import ErrorHandler = ErrorLink.ErrorHandler;\n\nexport function onError(errorHandler: ErrorHandler): ApolloLink {\n  return new ApolloLink((operation, forward) => {\n    return new Observable(observer => {\n      let sub: any;\n      let retriedSub: any;\n      let retriedResult: any;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: result => {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation,\n                forward,\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer),\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: networkError => {\n            retriedResult = errorHandler({\n              operation,\n              networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors:\n                networkError &&\n                networkError.result &&\n                networkError.result.errors,\n              forward,\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer),\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: () => {\n            // disable the previous sub from calling complete on observable\n            // if retry is in flight.\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          },\n        });\n      } catch (e) {\n        errorHandler({ networkError: e, operation, forward });\n        observer.error(e);\n      }\n\n      return () => {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nexport class ErrorLink extends ApolloLink {\n  private link: ApolloLink;\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super();\n    this.link = onError(errorHandler);\n  }\n\n  public request(\n    operation: Operation,\n    forward: NextLink,\n  ): Observable<FetchResult> | null {\n    return this.link.request(operation, forward);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}