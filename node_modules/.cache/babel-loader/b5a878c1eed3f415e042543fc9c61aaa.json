{"ast":null,"code":"import _objectSpread from\"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import App from'./App';import{ApolloClient,InMemoryCache,ApolloProvider,createHttpLink,ApolloLink}from'@apollo/client';import{onError}from\"@apollo/client/link/error\";import{setContext}from'apollo-link-context';import{jsx as _jsx}from\"react/jsx-runtime\";var errorLink=onError(function(_ref){var graphQLErrors=_ref.graphQLErrors,networkError=_ref.networkError;if(networkError){console.log(\"[Network error]: \".concat(networkError));}if(graphQLErrors){graphQLErrors.forEach(function(_ref2){var message=_ref2.message,locations=_ref2.locations,path=_ref2.path;return console.log(\"[GraphQL error]: Message: \".concat(message,\", Location: \").concat(locations,\", Path: \").concat(path));});}});var httpLink=createHttpLink({uri:'https://vast-atoll-78477.herokuapp.com/'});var authLink=setContext(function(_,_ref3){var headers=_ref3.headers;var token=localStorage.getItem('jwtToken');return{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):''})};});var link=ApolloLink.from([errorLink,authLink,httpLink]);var client=new ApolloClient({link:link,cache:new InMemoryCache()});export default/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(App,{})});","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/E-client/src/ApolloProvider.js"],"names":["React","App","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","ApolloLink","onError","setContext","errorLink","graphQLErrors","networkError","console","log","forEach","message","locations","path","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","link","from","client","cache"],"mappings":"oHAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,OAAQC,YAAR,CAAsBC,aAAtB,CAAoCC,cAApC,CAAmDC,cAAnD,CAAkEC,UAAlE,KAAmF,gBAAnF,CACA,OAASC,OAAT,KAAwB,2BAAxB,CACA,OAAQC,UAAR,KAAyB,qBAAzB,C,2CAEA,GAAMC,CAAAA,SAAS,CAAGF,OAAO,CAAC,cAAmC,IAAjCG,CAAAA,aAAiC,MAAjCA,aAAiC,CAAlBC,YAAkB,MAAlBA,YAAkB,CACzD,GAAIA,YAAJ,CAAkB,CACdC,OAAO,CAACC,GAAR,4BAAgCF,YAAhC,GACD,CAED,GAAID,aAAJ,CAAmB,CACjBA,aAAa,CAACI,OAAd,CAAsB,mBAAGC,CAAAA,OAAH,OAAGA,OAAH,CAAYC,SAAZ,OAAYA,SAAZ,CAAuBC,IAAvB,OAAuBA,IAAvB,OACpBL,CAAAA,OAAO,CAACC,GAAR,qCAC+BE,OAD/B,wBACqDC,SADrD,oBACyEC,IADzE,EADoB,EAAtB,EAKD,CACN,CAZwB,CAAzB,CAaA,GAAMC,CAAAA,QAAQ,CAAGb,cAAc,CAAC,CAC5Bc,GAAG,CAAE,yCADuB,CAAD,CAA/B,CAGA,GAAMC,CAAAA,QAAQ,CAAIZ,UAAU,CAAC,SAACa,CAAD,OAAgB,IAAZC,CAAAA,OAAY,OAAZA,OAAY,CAC3C,GAAMC,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd,CACE,MAAM,CACFH,OAAO,gCACAA,OADA,MAEHI,aAAa,CAAEH,KAAK,kBAAYA,KAAZ,EAAoB,EAFrC,EADL,CAAN,CAMH,CAR2B,CAA5B,CASA,GAAMI,CAAAA,IAAI,CAAGrB,UAAU,CAACsB,IAAX,CAAgB,CAACnB,SAAD,CAAWW,QAAX,CAAoBF,QAApB,CAAhB,CAAb,CACA,GAAMW,CAAAA,MAAM,CAAI,GAAI3B,CAAAA,YAAJ,CAAiB,CAC7ByB,IAAI,CAAEA,IADuB,CAE7BG,KAAK,CAAE,GAAI3B,CAAAA,aAAJ,EAFsB,CAAjB,CAAhB,CAIA,2BACI,KAAC,cAAD,EAAgB,MAAM,CAAE0B,MAAxB,uBACI,KAAC,GAAD,IADJ,EADJ","sourcesContent":["import React from 'react';\r\nimport App from './App';\r\nimport {ApolloClient, InMemoryCache,ApolloProvider,createHttpLink,ApolloLink} from '@apollo/client';\r\nimport { onError } from \"@apollo/client/link/error\";\r\nimport {setContext} from 'apollo-link-context';\r\n\r\nconst errorLink = onError(({graphQLErrors, networkError}) => {\r\n    if (networkError) {\r\n        console.log(`[Network error]: ${networkError}`);\r\n      }\r\n  \r\n      if (graphQLErrors) {\r\n        graphQLErrors.forEach(({ message, locations, path }) =>\r\n          console.log(\r\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\r\n          )\r\n        );\r\n      }\r\n})\r\nconst httpLink = createHttpLink({ \r\n    uri: 'https://vast-atoll-78477.herokuapp.com/'\r\n})\r\nconst authLink =  setContext((_,{headers}) =>{\r\n  const token = localStorage.getItem('jwtToken')\r\n    return{\r\n        headers:{\r\n            ...headers,\r\n            authorization: token? `Bearer ${token}`:''\r\n        }\r\n    }\r\n});\r\nconst link = ApolloLink.from([errorLink,authLink,httpLink]);\r\nconst client =  new ApolloClient({\r\n    link: link,\r\n    cache: new InMemoryCache()\r\n})\r\nexport default(\r\n    <ApolloProvider client={client}>\r\n        <App/>\r\n    </ApolloProvider>\r\n);"]},"metadata":{},"sourceType":"module"}