{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  var operation = null;\n\n  var _iterator = _createForOfIteratorHelper(documentAST.definitions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var definition = _step.value;\n\n      if (definition.kind === Kind.OPERATION_DEFINITION) {\n        var _definition$name;\n\n        if (operationName == null) {\n          // If no operation name was provided, only return an Operation if there\n          // is one defined in the document. Upon encountering the second, return\n          // null.\n          if (operation) {\n            return null;\n          }\n\n          operation = definition;\n        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {\n          return definition;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return operation;\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/utilities/getOperationAST.mjs"],"names":["Kind","getOperationAST","documentAST","operationName","operation","definitions","definition","kind","OPERATION_DEFINITION","_definition$name","name","value"],"mappings":";AAAA,SAASA,IAAT,QAAqB,uBAArB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,CAAyBC,WAAzB,EAAsCC,aAAtC,EAAqD;AAC1D,MAAIC,SAAS,GAAG,IAAhB;;AAD0D,6CAGjCF,WAAW,CAACG,WAHqB;AAAA;;AAAA;AAG1D,wDAAkD;AAAA,UAAvCC,UAAuC;;AAChD,UAAIA,UAAU,CAACC,IAAX,KAAoBP,IAAI,CAACQ,oBAA7B,EAAmD;AACjD,YAAIC,gBAAJ;;AAEA,YAAIN,aAAa,IAAI,IAArB,EAA2B;AACzB;AACA;AACA;AACA,cAAIC,SAAJ,EAAe;AACb,mBAAO,IAAP;AACD;;AAEDA,UAAAA,SAAS,GAAGE,UAAZ;AACD,SATD,MASO,IACL,CAAC,CAACG,gBAAgB,GAAGH,UAAU,CAACI,IAA/B,MAAyC,IAAzC,IACDD,gBAAgB,KAAK,KAAK,CADzB,GAEG,KAAK,CAFR,GAGGA,gBAAgB,CAACE,KAHrB,MAGgCR,aAJ3B,EAKL;AACA,iBAAOG,UAAP;AACD;AACF;AACF;AAzByD;AAAA;AAAA;AAAA;AAAA;;AA2B1D,SAAOF,SAAP;AACD","sourcesContent":["import { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (\n        ((_definition$name = definition.name) === null ||\n        _definition$name === void 0\n          ? void 0\n          : _definition$name.value) === operationName\n      ) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n"]},"metadata":{},"sourceType":"module"}