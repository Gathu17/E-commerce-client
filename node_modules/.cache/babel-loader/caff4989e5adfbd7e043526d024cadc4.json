{"ast":null,"code":"import * as React from 'react';\n\nvar getWindowEvent = function getWindowEvent(target) {\n  if (target) {\n    var _ownerDocument$defaul, _ownerDocument, _ownerDocument$defaul2;\n\n    if (typeof target.window === 'object' && target.window === target) {\n      return target.event;\n    }\n\n    return (_ownerDocument$defaul = (_ownerDocument = target.ownerDocument) == null ? void 0 : (_ownerDocument$defaul2 = _ownerDocument.defaultView) == null ? void 0 : _ownerDocument$defaul2.event) != null ? _ownerDocument$defaul : undefined;\n  }\n\n  return undefined;\n};\n\nvar isActionSupported = function isActionSupported(element, method) {\n  return element ? !!element[method] : false;\n};\n\nexport var useEventListener = function useEventListener(options) {\n  var capture = options.capture,\n      listener = options.listener,\n      type = options.type,\n      target = options.target,\n      targetRef = options.targetRef;\n  var latestListener = React.useRef(listener);\n  latestListener.current = listener;\n  var eventHandler = React.useCallback(function (event) {\n    return latestListener.current(event);\n  }, []);\n  var timeoutId = React.useRef(undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(function () {\n    var element = typeof targetRef === 'undefined' ? target : targetRef.current; // Store the current event to avoid triggering handlers immediately\n    // Note this depends on a deprecated but extremely well supported quirk of the web platform\n    // https://github.com/facebook/react/issues/20074\n\n    var currentEvent = getWindowEvent(window);\n\n    var conditionalHandler = function conditionalHandler(event) {\n      // Skip if this event is the same as the one running when we added the handlers\n      if (event === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      eventHandler(event);\n    };\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, conditionalHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error('@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.');\n    } // @ts-ignore We have a collision between types from DOM and @types/node\n\n\n    timeoutId.current = setTimeout(function () {\n      currentEvent = undefined;\n    }, 1);\n    return function () {\n      clearTimeout(timeoutId.current);\n      currentEvent = undefined;\n\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, conditionalHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error('@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.');\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};","map":{"version":3,"mappings":"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","names":["React","getWindowEvent","target","window","event","ownerDocument","_ownerDocument","defaultView","_ownerDocument$defaul2","undefined","isActionSupported","element","method","useEventListener","options","capture","listener","type","targetRef","latestListener","useRef","current","eventHandler","useCallback","timeoutId","process","env","NODE_ENV","useEffect","Error","currentEvent","conditionalHandler","addEventListener","setTimeout","clearTimeout","removeEventListener"],"sources":["C:\\Users\\GATHU\\Desktop\\E-client\\node_modules\\@fluentui\\react-component-event-listener\\dist\\es\\useEventListener.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { EventHandler, EventListenerOptions, EventTypes, Target } from './types';\n\nconst getWindowEvent = (target: Target): Event | undefined => {\n  if (target) {\n    if (typeof (target as Window).window === 'object' && (target as Window).window === target) {\n      return target.event;\n    }\n\n    return (target as Node).ownerDocument?.defaultView?.event ?? undefined;\n  }\n\n  return undefined;\n};\n\nconst isActionSupported = (\n  element: Target | null | undefined,\n  method: 'addEventListener' | 'removeEventListener',\n): element is Target => (element ? !!element[method] : false);\n\nexport const useEventListener = <T extends EventTypes>(options: EventListenerOptions<T>): void => {\n  const { capture, listener, type, target, targetRef } = options;\n\n  const latestListener = React.useRef<EventHandler<T>>(listener);\n  latestListener.current = listener;\n\n  const eventHandler = React.useCallback((event: DocumentEventMap[T]) => {\n    return latestListener.current(event);\n  }, []);\n\n  const timeoutId = React.useRef<number | undefined>(undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(() => {\n    const element: Target | null | undefined = typeof targetRef === 'undefined' ? target : targetRef.current;\n\n    // Store the current event to avoid triggering handlers immediately\n    // Note this depends on a deprecated but extremely well supported quirk of the web platform\n    // https://github.com/facebook/react/issues/20074\n    let currentEvent = getWindowEvent(window);\n\n    const conditionalHandler = (event: DocumentEventMap[T]) => {\n      // Skip if this event is the same as the one running when we added the handlers\n      if (event === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      eventHandler(event);\n    };\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, conditionalHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.',\n      );\n    }\n\n    // @ts-ignore We have a collision between types from DOM and @types/node\n    timeoutId.current = setTimeout(() => {\n      currentEvent = undefined;\n    }, 1);\n\n    return () => {\n      clearTimeout(timeoutId.current);\n      currentEvent = undefined;\n\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, conditionalHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.',\n        );\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};\n"]},"metadata":{},"sourceType":"module"}