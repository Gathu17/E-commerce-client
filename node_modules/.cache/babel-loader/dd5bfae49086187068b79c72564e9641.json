{"ast":null,"code":"import _slicedToArray from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\n\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n\n    var argumentNodes = (_parentNode$arguments = parentNode.arguments) !== null && _parentNode$arguments !== void 0 ? _parentNode$arguments : [];\n    var seenArgs = groupBy(argumentNodes, function (arg) {\n      return arg.name.value;\n    });\n\n    var _iterator = _createForOfIteratorHelper(seenArgs),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            argName = _step$value[0],\n            argNodes = _step$value[1];\n\n        if (argNodes.length > 1) {\n          context.reportError(new GraphQLError(\"There can be only one argument named \\\"\".concat(argName, \"\\\".\"), argNodes.map(function (node) {\n            return node.name;\n          })));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs"],"names":["groupBy","GraphQLError","UniqueArgumentNamesRule","context","Field","checkArgUniqueness","Directive","parentNode","_parentNode$arguments","argumentNodes","arguments","seenArgs","arg","name","value","argName","argNodes","length","reportError","map","node"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,8BAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,OAAjC,EAA0C;AAC/C,SAAO;AACLC,IAAAA,KAAK,EAAEC,kBADF;AAELC,IAAAA,SAAS,EAAED;AAFN,GAAP;;AAKA,WAASA,kBAAT,CAA4BE,UAA5B,EAAwC;AACtC,QAAIC,qBAAJ,CADsC,CAGtC;;AAEA;;;AACA,QAAMC,aAAa,GACjB,CAACD,qBAAqB,GAAGD,UAAU,CAACG,SAApC,MAAmD,IAAnD,IACAF,qBAAqB,KAAK,KAAK,CAD/B,GAEIA,qBAFJ,GAGI,EAJN;AAKA,QAAMG,QAAQ,GAAGX,OAAO,CAACS,aAAD,EAAgB,UAACG,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,CAASC,KAAlB;AAAA,KAAhB,CAAxB;;AAXsC,+CAaJH,QAbI;AAAA;;AAAA;AAatC,0DAA4C;AAAA;AAAA,YAAhCI,OAAgC;AAAA,YAAvBC,QAAuB;;AAC1C,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvBd,UAAAA,OAAO,CAACe,WAAR,CACE,IAAIjB,YAAJ,kDAC2Cc,OAD3C,UAEEC,QAAQ,CAACG,GAAT,CAAa,UAACC,IAAD;AAAA,mBAAUA,IAAI,CAACP,IAAf;AAAA,WAAb,CAFF,CADF;AAMD;AACF;AAtBqC;AAAA;AAAA;AAAA;AAAA;AAuBvC;AACF","sourcesContent":["import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            argNodes.map((node) => node.name),\n          ),\n        );\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}