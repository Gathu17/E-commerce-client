{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/GATHU/Desktop/E-client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isListType, isNonNullType, isObjectType, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var schemaConfig = schema.toConfig();\n  var typeMap = keyValMap(sortByName(schemaConfig.types), function (type) {\n    return type.name;\n  }, sortNamedType);\n  return new GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription)\n  }));\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      locations: sortBy(config.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(config.args)\n    }));\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, function (arg) {\n      return _objectSpread(_objectSpread({}, arg), {}, {\n        type: replaceType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        type: replaceType(field.type),\n        args: field.args && sortArgs(field.args)\n      });\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        type: replaceType(field.type)\n      });\n    });\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      var config = type.toConfig();\n      return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n        interfaces: function interfaces() {\n          return sortTypes(config.interfaces);\n        },\n        fields: function fields() {\n          return sortFields(config.fields);\n        }\n      }));\n    }\n\n    if (isInterfaceType(type)) {\n      var _config = type.toConfig();\n\n      return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {\n        interfaces: function interfaces() {\n          return sortTypes(_config.interfaces);\n        },\n        fields: function fields() {\n          return sortFields(_config.fields);\n        }\n      }));\n    }\n\n    if (isUnionType(type)) {\n      var _config2 = type.toConfig();\n\n      return new GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {\n        types: function types() {\n          return sortTypes(_config2.types);\n        }\n      }));\n    }\n\n    if (isEnumType(type)) {\n      var _config3 = type.toConfig();\n\n      return new GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {\n        values: sortObjMap(_config3.values, function (value) {\n          return value;\n        })\n      }));\n    }\n\n    if (isInputObjectType(type)) {\n      var _config4 = type.toConfig();\n\n      return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {\n        fields: function fields() {\n          return sortInputFields(_config4.fields);\n        }\n      }));\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n\n  var _iterator = _createForOfIteratorHelper(Object.keys(map).sort(naturalCompare)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      sortedMap[key] = sortValueFn(map[key]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}","map":{"version":3,"sources":["C:/Users/GATHU/Desktop/node_modules/graphql/utilities/lexicographicSortSchema.mjs"],"names":["inspect","invariant","keyValMap","naturalCompare","GraphQLEnumType","GraphQLInputObjectType","GraphQLInterfaceType","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLUnionType","isEnumType","isInputObjectType","isInterfaceType","isListType","isNonNullType","isObjectType","isScalarType","isUnionType","GraphQLDirective","isIntrospectionType","GraphQLSchema","lexicographicSortSchema","schema","schemaConfig","toConfig","typeMap","sortByName","types","type","name","sortNamedType","Object","values","directives","map","sortDirective","query","replaceMaybeType","mutation","subscription","replaceType","ofType","replaceNamedType","maybeType","directive","config","locations","sortBy","x","args","sortArgs","sortObjMap","arg","sortFields","fieldsMap","field","sortInputFields","sortTypes","array","interfaces","fields","value","sortValueFn","sortedMap","create","keys","sort","key","obj","mapToKey","slice","obj1","obj2","key1","key2"],"mappings":"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","sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { isIntrospectionType } from '../type/introspection.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\n/**\n * Sort GraphQLSchema.\n *\n * This function returns a sorted copy of the given GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  const schemaConfig = schema.toConfig();\n  const typeMap = keyValMap(\n    sortByName(schemaConfig.types),\n    (type) => type.name,\n    sortNamedType,\n  );\n  return new GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    directives: sortByName(schemaConfig.directives).map(sortDirective),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n  });\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME: TS Conversion\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function replaceMaybeType(maybeType) {\n    return maybeType && replaceNamedType(maybeType);\n  }\n\n  function sortDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      locations: sortBy(config.locations, (x) => x),\n      args: sortArgs(config.args),\n    });\n  }\n\n  function sortArgs(args) {\n    return sortObjMap(args, (arg) => ({ ...arg, type: replaceType(arg.type) }));\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && sortArgs(field.args),\n    }));\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, (field) => ({\n      ...field,\n      type: replaceType(field.type),\n    }));\n  }\n\n  function sortTypes(array) {\n    return sortByName(array).map(replaceNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    if (isObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLObjectType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isInterfaceType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInterfaceType({\n        ...config,\n        interfaces: () => sortTypes(config.interfaces),\n        fields: () => sortFields(config.fields),\n      });\n    }\n\n    if (isUnionType(type)) {\n      const config = type.toConfig();\n      return new GraphQLUnionType({\n        ...config,\n        types: () => sortTypes(config.types),\n      });\n    }\n\n    if (isEnumType(type)) {\n      const config = type.toConfig();\n      return new GraphQLEnumType({\n        ...config,\n        values: sortObjMap(config.values, (value) => value),\n      });\n    }\n\n    if (isInputObjectType(type)) {\n      const config = type.toConfig();\n      return new GraphQLInputObjectType({\n        ...config,\n        fields: () => sortInputFields(config.fields),\n      });\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible types have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  const sortedMap = Object.create(null);\n\n  for (const key of Object.keys(map).sort(naturalCompare)) {\n    sortedMap[key] = sortValueFn(map[key]);\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, (obj) => obj.name);\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort((obj1, obj2) => {\n    const key1 = mapToKey(obj1);\n    const key2 = mapToKey(obj2);\n    return naturalCompare(key1, key2);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}